@model IEnumerable<AlertSystem.Models.Entities.Alert>
@{
    ViewData["Title"] = "Alertes";
}
<div class="container py-3">
  <div class="d-flex align-items-center justify-content-between mb-3">
    <h3 class="mb-0">Alertes</h3>
    <a class="btn btn-primary" asp-action="Create">Nouvelle alerte</a>
  </div>

  <div class="card mb-4 shadow-sm">
    <div class="card-body">
      <div class="row g-3 align-items-end">
        <div class="col-md-3">
          <label class="form-label">Alerte rapide</label>
          <select id="quickSelect" class="form-select">
            <option value="">-- Sélectionner --</option>
          </select>
        </div>
        <div class="col-md-3">
          <label class="form-label">Titre</label>
          <input id="fTitle" class="form-control" />
        </div>
        <div class="col-md-3">
          <label class="form-label">Type</label>
          <select id="fType" class="form-select">
            <option value="Information">Information</option>
            <option value="Obligatoire">Obligatoire</option>
          </select>
        </div>
        <div class="col-md-3">
          <select id="fDept" class="form-select d-none" disabled>
            <option value="">-- Choisir --</option>
            @if (ViewBag.Departments is List<AlertSystem.Models.Entities.Department> depts)
            {
                foreach (var d in depts) { <option value="@d.DepartmentId">@d.Name</option> }
            }
          </select>
        </div>
        <div class="col-md-6">
          <label class="form-label">Destinataires (du département)</label>
          <input id="fRecipientsSearch" class="form-control mb-2" placeholder="Rechercher un destinataire..." />
          <select id="fRecipients" multiple class="form-select" size="8"></select>
          <div class="form-text">Laisser vide pour envoyer à tous (sauf vous).</div>
        </div>
        <div class="col-12">
          <label class="form-label">Message</label>
          <textarea id="fMessage" class="form-control" rows="3"></textarea>
        </div>
        <div class="col-12 d-flex gap-2">
          <button id="btnQuickSave" class="btn btn-outline-secondary" type="button">Enregistrer alerte</button>
          <button id="btnSend" class="btn btn-primary" type="button">Envoyer l'alerte</button>
          <div id="toastZone" class="ms-auto"></div>
        </div>
      </div>
    </div>
  </div>

  <form method="get" class="row g-2 mb-3 align-items-end sticky-top bg-white pt-2 pb-2" style="top:60px;z-index:2;border-bottom:1px solid rgba(0,0,0,.05)">
    <div class="col-auto">
      <select name="type" class="form-select">
        <option value="">Tous types</option>
        <option value="Information">Information</option>
        <option value="Obligatoire">Obligatoire</option>
      </select>
    </div>
    <div class="col-auto">
      <select name="departmentId" class="form-select">
        <option value="">Tous départements</option>
        @if (ViewBag.Departments is List<AlertSystem.Models.Entities.Department> depts)
        {
            foreach (var d in depts) { <option value="@d.DepartmentId">@d.Name</option> }
        }
      </select>
    </div>
    <div class="col-auto"><input type="date" name="from" class="form-control" /></div>
    <div class="col-auto"><input type="date" name="to" class="form-control" /></div>
    <div class="col-auto d-flex gap-2">
      <button class="btn btn-outline-secondary" type="submit">Filtrer</button>
      <a class="btn btn-outline-light border" asp-action="Index">Réinitialiser</a>
    </div>
  </form>

  <div class="card shadow-sm">
    <div class="card-body p-0">
      <table class="table table-sm align-middle mb-0 table-hover">
        <thead>
          <tr>
            <th scope="col" style="width:180px">Date</th>
            <th scope="col">Type</th>
            <th scope="col">Titre</th>
            <th scope="col" style="width:220px">Département</th>
            <th scope="col" class="text-end" style="width:180px">Actions</th>
          </tr>
        </thead>
        <tbody>
        @if (!Model.Any()) {
          <tr>
            <td colspan="5">
              <div class="empty-state text-center p-4">
                <div class="mb-2">Aucune alerte trouvée</div>
                <a class="btn btn-sm btn-primary" asp-action="Create">Créer une alerte</a>
              </div>
            </td>
          </tr>
        } else {
        @foreach (var a in Model)
        {
          <tr>
            <td>@a.CreatedAt.AddHours(1).ToString("dd/MM/yyyy HH:mm:ss")</td>
            <td>
              @(a.AlertType=="Obligatoire"
                ? Html.Raw("<span class=\"badge badge-type-obl\">Obligatoire</span>")
                : Html.Raw("<span class=\"badge badge-type-info\">Information</span>"))
            </td>
            <td><a asp-action="Details" asp-route-id="@a.AlertId">@a.Title</a></td>
            <td>@(a.Department?.Name ?? "-")</td>
            <td class="text-end">
              <a class="btn btn-sm btn-outline-primary" asp-action="Edit" asp-route-id="@a.AlertId">Modifier</a>
              <form class="d-inline" asp-action="Delete" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@a.AlertId" />
                <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Supprimer ?')">Supprimer</button>
              </form>
            </td>
          </tr>
        }
        }
        </tbody>
      </table>
    </div>
  </div>
</div>

@section Scripts {
<script>
  async function loadQuick(){
    const res = await fetch('/AlertsCrud/QuickList'); const items = await res.json();
    const sel = document.getElementById('quickSelect');
    items.forEach(x=>{
      const o = document.createElement('option');
      o.value = x.alertId; o.textContent = x.title;
      o.dataset.message = x.message; o.dataset.type = x.alertType; o.dataset.departmentId = x.departmentId ?? '';
      sel.appendChild(o);
    });
  }

  document.getElementById('quickSelect').addEventListener('change', (e)=>{
    const opt = e.target.selectedOptions[0]; if (!opt || !opt.value) return;
    document.getElementById('fTitle').value = opt.textContent;
    document.getElementById('fMessage').value = opt.dataset.message || '';
    document.getElementById('fType').value = opt.dataset.type || 'Information';
    const d = opt.dataset.departmentId || '';
    const deptSel = document.getElementById('fDept'); if (deptSel) deptSel.value = d;
  });

  async function loadDeptUsers(){
    const r = await fetch('/AlertsCrud/DeptUsers'); const users = await r.json();
    const sel = document.getElementById('fRecipients'); sel.innerHTML = '';
    users.forEach(u=>{ const o=document.createElement('option'); o.value=u.userId; o.textContent=`${u.username} (${u.email})`; sel.appendChild(o); });
  }

  document.getElementById('btnQuickSave').addEventListener('click', async ()=>{
    const fd = new URLSearchParams();
    fd.set('title', document.getElementById('fTitle').value);
    fd.set('message', document.getElementById('fMessage').value);
    fd.set('alertType', document.getElementById('fType').value);
    const deptSel = document.getElementById('fDept'); if (deptSel) fd.set('departmentId', deptSel.value);
    const r = await fetch('/AlertsCrud/QuickSave', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: fd });
    showToast(r.ok? 'Alerte enregistrée' : 'Erreur enregistrement', r.ok);
    document.getElementById('quickSelect').innerHTML = '<option value="">-- Sélectionner --</option>';
    loadQuick();
  });

  document.getElementById('btnSend').addEventListener('click', async ()=>{
    let alertId = document.getElementById('quickSelect').value;
    if (!alertId){
      const fd = new URLSearchParams();
      fd.set('title', document.getElementById('fTitle').value);
      fd.set('message', document.getElementById('fMessage').value);
      fd.set('alertType', document.getElementById('fType').value);
      const deptSel = document.getElementById('fDept'); if (deptSel) fd.set('departmentId', deptSel.value);
      const res = await fetch('/AlertsCrud/QuickSave', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: fd });
      const data = await res.json(); alertId = data.alertId;
      document.getElementById('quickSelect').innerHTML = '<option value="">-- Sélectionner --</option>';
      await loadQuick();
      document.getElementById('quickSelect').value = alertId;
    }
    const sendFd = new URLSearchParams(); sendFd.set('alertId', alertId);
    sendFd.set('title', document.getElementById('fTitle').value);
    sendFd.set('message', document.getElementById('fMessage').value);
    sendFd.set('alertType', document.getElementById('fType').value);
    const deptSel = document.getElementById('fDept'); if (deptSel) sendFd.set('departmentId', deptSel.value);
    const recSel = document.getElementById('fRecipients');
    if (recSel){
      const selected = Array.from(recSel.selectedOptions).map(o=>o.value).filter(Boolean);
      if (selected.length>0) sendFd.set('recipients', selected.join(','));
    }
    const rr = await fetch('/AlertsCrud/Send', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: sendFd });
    showToast(rr.ok? 'Alerte envoyée' : 'Erreur envoi', rr.ok);
  });

  loadQuick();
  loadDeptUsers();

  // Filtre rapide des destinataires (client-side)
  document.getElementById('fRecipientsSearch').addEventListener('input', (e)=>{
    const q = (e.target.value || '').toLowerCase();
    const sel = document.getElementById('fRecipients');
    Array.from(sel.options).forEach(o => {
      const txt = o.textContent.toLowerCase();
      o.hidden = q && !txt.includes(q);
    });
  });

  function showToast(msg, ok){
    const zone=document.getElementById('toastZone');
    const t=document.createElement('div');
    t.className='toast align-items-center text-white '+(ok?'bg-success':'bg-danger');
    t.setAttribute('role','alert'); t.setAttribute('aria-live','assertive'); t.setAttribute('aria-atomic','true');
    t.innerHTML = `<div class="d-flex"><div class="toast-body">${msg}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
    zone.appendChild(t);
    const toast = new bootstrap.Toast(t,{delay:2000}); toast.show();
    t.addEventListener('hidden.bs.toast', ()=> t.remove());
  }
</script>
}


