@{
    ViewData["Title"] = "Historique des alertes";
    var isAdmin = User.IsInRole("Admin");
}
<div class="container py-3">
  <h3>Historique des alertes</h3>

  @Html.AntiForgeryToken()

  <form id="filters" class="row g-2 mb-3">
    <div class="col-auto">
      <select name="type" class="form-select">
        <option value="">Tous types</option>
        <option value="Information">Information</option>
        <option value="Obligatoire">Obligatoire</option>
      </select>
    </div>
    <div class="col-auto">
      <select name="status" class="form-select">
        <option value="all">Tous statuts</option>
        <option value="unread">Non lus</option>
        <option value="pending">En attente</option>
        <option value="confirmed">Confirm√©s</option>
      </select>
    </div>
    <div class="col-auto">
      <input type="date" name="from" class="form-control" />
    </div>
    <div class="col-auto">
      <input type="date" name="to" class="form-control" />
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary">Filtrer</button>
    </div>
  </form>

  <div id="list"><div class="text-muted">Chargement...</div></div>
  <nav class="mt-3"><ul class="pagination" id="pager"></ul></nav>
</div>

@section Scripts {
<script>
  const isAdmin = @(User.IsInRole("Admin").ToString().ToLower());
  let page = 1, size = 10;

  function token(){ return document.querySelector('input[name="__RequestVerificationToken"]').value; }

  async function load(){
    const params = new URLSearchParams(new FormData(document.getElementById('filters')));
    params.append('page', page); params.append('size', size);
    const res = await fetch(`/Alerts/HistoryData?${params.toString()}`, { cache: 'no-store' });
    const data = await res.json();
    render(data);
  }

  function render(data){
    const list = document.getElementById('list');
    if(!data.items || data.items.length===0){
      list.innerHTML = '<div class="text-muted">Aucune alerte</div>';
      document.getElementById('pager').innerHTML = '';
      return;
    }
    list.innerHTML = `
      <table class="table table-sm align-middle">
        <thead><tr>
          <th>Date</th><th>Type</th><th>Titre</th><th>Statut</th><th></th>
        </tr></thead>
        <tbody>
        ${data.items.map(x => `
          <tr>
            <td>${new Date(x.createdAt).toLocaleString()}</td>
            <td>${x.alertType}</td>
            <td>${x.title}</td>
            <td>${x.alertType==='Obligatoire' ? (x.isRead ? 'Lu' : 'Non lu') : ''}</td>
              <td class="text-end">
                ${isAdmin ? '' : (x.alertType==='Obligatoire' && !x.isRead ? `<button class="btn btn-outline-secondary btn-sm" onclick="markRead(${x.alertRecipientId})">Marquer lu</button>` : '')}
              </td>
          </tr>`).join('')}
        </tbody>
      </table>`;
    renderPager(data.totalCount, data.page, data.size);
  }

  function renderPager(total, pageIdx, size){
    const pages = Math.max(1, Math.ceil(total / size));
    const pager = document.getElementById('pager');
    pager.innerHTML = '';
    for(let i=1;i<=pages;i++){
      const li = document.createElement('li');
      li.className = `page-item ${i===pageIdx?'active':''}`;
      li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
      li.onclick = (e)=>{ e.preventDefault(); page=i; load(); };
      pager.appendChild(li);
    }
  }

  async function confirmAlert(id){
    await fetch('/Alerts/Confirm', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','RequestVerificationToken':token()}, body:`alertRecipientId=${id}` });
    load();
  }
  async function markRead(id){
    await fetch('/Alerts/MarkRead', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded','RequestVerificationToken':token()}, body:`alertRecipientId=${id}` });
    load();
  }

  document.getElementById('filters').addEventListener('submit', (e)=>{ e.preventDefault(); page=1; load(); });
  load();
</script>
}


