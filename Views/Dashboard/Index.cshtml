@{
    ViewData["Title"] = "Dashboard";
    var role = (string?)ViewBag.Role ?? "";
    var departments = ViewBag.Departments as List<AlertSystem.Models.Entities.Department>;
}
<div class="container py-3">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <h3 class="mb-1">Tableau de bord</h3>
    <div class="text-muted">Bienvenue</div>
    </div>
    <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#newAlertModal" style="font-size: 1.1rem;">
      <i class="bi bi-plus-circle me-2"></i>Nouvelle alerte
    </button>
  </div>

  <!-- Pending Alerts Section -->
  <div class="row mb-3" id="pendingAlertsSection" style="display: none;">
    <div class="col-12">
      <div class="card border-warning">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">‚è≥ Alertes en cours d'envoi</h5>
        </div>
        <div class="card-body" id="pendingAlertsList">
          <!-- Populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <div class="row g-3 mb-3" id="kpiRow">
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Alertes du jour</div>
              <div class="kpi-value" id="kpiToday">‚Äî</div>
            </div>
            <span class="kpi-dot bg-primary"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires en attente</div>
              <div class="kpi-value" id="kpiPending">‚Äî</div>
            </div>
            <span class="kpi-dot bg-warning"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires confirm√©es</div>
              <div class="kpi-value" id="kpiConfirmedMandatory">‚Äî</div>
            </div>
            <span class="kpi-dot bg-success"></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <ul class="nav nav-tabs" id="tabs" role="tablist">
    <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#inbox" type="button"><span class="me-1" aria-hidden="true">üì•</span> Bo√Æte de r√©ception</button></li>
    <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#sent" type="button"><span class="me-1" aria-hidden="true">üì§</span> Bo√Æte d'envoi</button></li>
  </ul>
  <div class="tab-content card shadow-sm border-0 p-3">
    <div class="tab-pane fade show active" id="inbox">
      <div id="inboxList">Chargement...</div>
    </div>
    <div class="tab-pane fade" id="sent">
      <div id="sentList">Chargement...</div>
    </div>
    
  </div>
</div>

<!-- Modal Nouvelle Alerte -->
<div class="modal fade" id="newAlertModal" tabindex="-1" aria-labelledby="newAlertModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="newAlertModalLabel">
          <i class="bi bi-bell me-2"></i>Nouvelle alerte
        </h4>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Section Alertes rapides -->
        <div class="card mb-4">
          <div class="card-header bg-primary">
            <h6 class="mb-0"><i class="bi bi-lightning me-1"></i>Alertes rapides</h6>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-8">
                <select id="modalQuickSelect" class="form-select">
                  <option value="">-- S√©lectionner une alerte rapide --</option>
                </select>
              </div>
              <div class="col-md-4 text-end">
                <small class="text-muted">S√©lectionnez pour remplir automatiquement</small>
              </div>
            </div>
          </div>
        </div>

        <!-- Formulaire principal -->
        <form id="newAlertForm">
          <div class="row g-3">
            <!-- Titre -->
            <div class="col-12">
              <label class="form-label fw-bold">
                <i class="bi bi-pencil me-1"></i>Titre de l'alerte *
              </label>
              <input id="modalTitle" class="form-control" required placeholder="Entrez le titre de l'alerte..." />
            </div>
            
            <!-- Message -->
            <div class="col-12">
              <label class="form-label fw-bold">
                <i class="bi bi-chat-text me-1"></i>Message
              </label>
              <textarea id="modalMessage" class="form-control" rows="4" placeholder="Entrez le message de l'alerte..."></textarea>
            </div>
            
            <!-- Type -->
            <div class="col-md-6">
              <label class="form-label fw-bold">
                <i class="bi bi-tag me-1"></i>Type d'alerte
              </label>
              <select id="modalAlertType" class="form-select">
                <option value="Information">üìÑ Information</option>
                <option value="Obligatoire">‚ö†Ô∏è Obligatoire</option>
              </select>
            </div>
          </div>
          
          <!-- Plateformes d'envoi (en haut) -->
          <div class="card mt-4 order-0">
            <div class="card-header bg-success">
              <h6 class="mb-0"><i class="bi bi-send me-1"></i>Plateformes d'envoi</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-12">
                  <label class="form-label fw-bold">S√©lectionnez les moyens d'envoi :</label>
                  <div class="mt-2">
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformEmail" value="email">
                      <label class="form-check-label" for="platformEmail">
                        <i class="bi bi-envelope me-1 text-primary"></i>Email
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformWhatsApp" value="whatsapp">
                      <label class="form-check-label" for="platformWhatsApp">
                        <i class="bi bi-whatsapp me-1 text-success"></i>WhatsApp
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformDesktop" value="desktop">
                      <label class="form-check-label" for="platformDesktop">
                        <i class="bi bi-bell me-1 text-warning"></i>Notification Desktop
                      </label>
                    </div>
                  </div>
                  <div class="form-text mt-2">
                    <i class="bi bi-info-circle me-1"></i>
                    S√©lectionnez une ou plusieurs plateformes.
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Coordonn√©es des destinataires (saisie libre) -->
          <div class="card mt-4 order-1">
            <div class="card-header bg-info">
              <h6 class="mb-0"><i class="bi bi-people me-1"></i>Coordonn√©es des destinataires</h6>
            </div>
            <div class="card-body">
              <div id="emailBlock" class="mb-3" style="display:none;">
                <label class="form-label fw-bold"><i class="bi bi-envelope me-1"></i>Emails</label>
                <div id="emailsTags" class="form-control d-flex flex-wrap gap-1" style="min-height:2.6rem; padding-top:.375rem; padding-bottom:.375rem;"></div>
                <small class="text-muted">Saisissez un email puis Entr√©e, virgule ou point-virgule.</small>
                <input type="hidden" id="emailsInput" />
              </div>
              <div id="whatsBlock" class="mb-3" style="display:none;">
                <label class="form-label fw-bold"><i class="bi bi-whatsapp me-1"></i>Num√©ros WhatsApp</label>
                <div id="whatsTags" class="form-control d-flex flex-wrap gap-1" style="min-height:2.6rem; padding-top:.375rem; padding-bottom:.375rem;"></div>
                <small class="text-muted">Saisissez un num√©ro (ex: +21650123456) puis Entr√©e, virgule ou point-virgule.</small>
                <input type="hidden" id="whatsInput" />
              </div>
              <div id="desktopBlock" class="mb-2" style="display:none;">
                <label class="form-label fw-bold"><i class="bi bi-bell me-1"></i>Device IDs (optionnel, s√©par√©s par virgule)</label>
                <input id="deviceIdsInput" class="form-control" placeholder="ex: device-abc, device-xyz" />
              </div>
              <div class="form-text">Ces champs apparaissent selon les plateformes s√©lectionn√©es.</div>
            </div>
          </div>

          <!-- API Key Management -->
          <div class="card mt-4">
            <div class="card-header bg-warning">
              <h6 class="mb-0"><i class="bi bi-key me-1"></i>Configuration API</h6>
            </div>
            <div class="card-body">
              <div class="row g-3">
                <div class="col-md-8">
                  <label class="form-label fw-bold">Cl√© API</label>
                  <div class="input-group">
                    <input type="password" id="apiKeyInput" class="form-control" placeholder="Entrez votre cl√© API..." />
                    <button type="button" id="toggleApiKeyBtn" class="btn btn-outline-secondary">
                      <i class="bi bi-eye"></i>
                    </button>
                  </div>
                  <small class="text-muted">La cl√© API est n√©cessaire pour envoyer des alertes via l'API</small>
                </div>
                <div class="col-md-4">
                  <label class="form-label">&nbsp;</label>
                  <div class="d-grid gap-2">
                    <button type="button" id="saveApiKeyBtn" class="btn btn-outline-primary btn-sm">
                      <i class="bi bi-save me-1"></i>Sauvegarder
                    </button>
                    <button type="button" id="testApiKeyBtn" class="btn btn-outline-success btn-sm">
                      <i class="bi bi-check-circle me-1"></i>Tester
                    </button>
                  </div>
                </div>
              </div>
              <div id="apiKeyStatus" class="mt-2"></div>
            </div>
          </div>
          
          <!-- Section Plateformes d'envoi (ancienne) supprim√©e car d√©plac√©e au-dessus -->
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-circle me-1"></i>Annuler
        </button>
        <button type="button" id="modalSaveBtn" class="btn btn-outline-primary">
          <i class="bi bi-lightning me-1"></i>Enregistrer comme alerte rapide
        </button>
        <button type="button" id="modalSendBtn" class="btn btn-success btn-lg">
          <i class="bi bi-send me-1"></i>Envoyer l'alerte
        </button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
// Global dashboard debug helper
const DLOG = (scope, msg, obj) => { try { console.debug(`[${scope}]`, msg, obj ?? ''); } catch {} };
async function fetchJson(url){ 
  console.log('[DEBUG] fetchJson called with URL:', url);
  try {
    const r = await fetch(url, { cache:'no-store' }); 
    console.log('[DEBUG] fetchJson response status:', r.status, r.statusText);
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const data = await r.json();
    console.log('[DEBUG] fetchJson success, data:', data);
    return data; 
  } catch (error) {
    console.error('[DEBUG] fetchJson error for URL:', url, 'Error:', error);
    console.error('Failed to load alerts dynamically, falling back to page reload', error);
    throw error;
  }
}
function fmtPlus1(dateIso){ const d = new Date(dateIso); return new Date(d.getTime()+3600000).toLocaleString(); }

async function loadInbox(){
  console.log('[DEBUG] loadInbox start');
  try {
    // Afficher toutes les alertes (lues et non lues) avec leur statut
    const data = await fetchJson('/Alerts/HistoryData?status=all&page=1&size=10');
    console.log('[DEBUG] loadInbox result:', { total: data?.total, items: data?.items?.length });
    renderList('inboxList', data, true);
    updateKpisFromData(data);
    updateUnreadKpi();
  } catch (error) {
    console.error('[DEBUG] loadInbox error:', error);
  }
}
async function loadSent(){
  console.log('[DEBUG] loadSent start');
  try {
    const data = await fetchJson('/Alerts/SentData?page=1&size=10');
    console.log('[DEBUG] loadSent result:', { total: data?.total, items: data?.items?.length });
    renderListCustom('sentList', data);
  } catch (error) {
    console.error('[DEBUG] loadSent error:', error);
  }
}
async function loadDept(){
  DLOG('Dashboard','loadDept start');
  const formElement = document.getElementById('deptFilters');
  if (!formElement) return;
  const params = new URLSearchParams(new FormData(formElement));
  const data = await fetchJson('/Alerts/DeptData?' + params.toString() + '&page=1&size=10');
  DLOG('Dashboard','loadDept result', { total: data?.totalCount, items: data?.items?.length });
  renderListCustom('deptList', data);
}
async function loadAll(){
  DLOG('Dashboard','loadAll start');
  const formElement = document.getElementById('allFilters');
  if (!formElement) return;
  const params = new URLSearchParams(new FormData(formElement));
  const r = await fetch(`/Alerts/HistoryData?${params.toString()}&page=1&size=20`);
  const data = await r.json();
  DLOG('Dashboard','loadAll result', { total: data?.totalCount, items: data?.items?.length });
  renderList('allList', data, false, true);
  const exportBtn = document.getElementById('exportCsvBtn');
  if (exportBtn) exportBtn.setAttribute('href', `/Alerts/ExportCsv?${params.toString()}`);
  updateKpisFromData(data);
  updateUnreadKpi();
}

function renderList(targetId, data, canConfirm, adminView=false){
  DLOG('Dashboard','renderList', { targetId, canConfirm, adminView, items: data?.items?.length });
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  el.innerHTML = `
    <table class="table table-sm align-middle">
      <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Exp√©diteur</th><th scope="col">Statut</th><th scope="col" class="text-end">Actions</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>
            ${x.alertType==='Obligatoire' ? '<span class="badge badge-type-obl">Obligatoire</span>' : '<span class="badge badge-type-info">Information</span>'}
          </td>
          <td>${x.title}</td>
          <td><small class="text-muted">${x.senderEmail || x.senderName || 'N/A'}</small></td>
          <td>${x.alertType==='Obligatoire' ? (x.isConfirmed ? '<span class="badge badge-status-lu">Lu</span>' : '<span class="badge badge-status-nonlu">Non lu</span>') : ''}</td>
          <td class="text-end">
            ${(!adminView && x.alertType==='Obligatoire' && !x.isConfirmed && canConfirm) ? `<button class="btn btn-outline-secondary btn-sm me-2" onclick="markRead(${x.alertRecipientId})" aria-label="Marquer l'alerte comme lue">Marquer lu</button>` : ''}
            <a class="btn btn-primary btn-sm" href="/AlertsCrud/Details/${x.alertId}">Acc√©der</a>
          </td>
        </tr>`).join('')}
      </tbody>
    </table>`;
}

function renderListCustom(targetId, data){
  DLOG('Dashboard','renderListCustom', { targetId, items: data?.items?.length });
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  
  // Check if this is sent data (has recipientCount) or dept data (has recipient)
  const isSentData = data.items.length > 0 && data.items[0].hasOwnProperty('recipientCount');
  
  if (isSentData) {
    // Render sent alerts (created by user)
    el.innerHTML = `
      <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Emails</th><th scope="col">Statut</th></tr></thead>
        <tbody>
        ${data.items.map(x => `
          <tr id="sent-row-${x.alertId}">
            <td>${fmtPlus1(x.createdAt)}</td>
            <td><span class="badge ${x.alertType==='Obligatoire'?'bg-warning text-dark':'bg-info'}">${x.alertType}</span></td>
            <td>${x.title}</td>
            <td><small class="text-muted">${x.recipientEmails || 'N/A'}</small></td>
            <td id="status-cell-${x.alertId}">
              ${getAlertStatusHtml(x)}
            </td>
          </tr>`).join('')}
        </tbody>
      </table>`;
  } else {
    // Render dept data (original format)
  el.innerHTML = `
    <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Exp√©diteur</th><th scope="col">Destinataire</th><th scope="col">Statut</th><th scope="col">Heure de r√©ception</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>${x.alertType}</td>
          <td>${x.title}</td>
          <td>${x.sender}</td>
          <td>${x.recipient}</td>
            <td>${x.alertType==='Obligatoire' ? (x.isConfirmed ? 'Lu' : 'Non lu') : ''}</td>
            <td>${x.isConfirmed && x.confirmedAt ? fmtPlus1(x.confirmedAt) : ''}</td>
        </tr>`).join('')}
      </tbody>
    </table>`;
  }
}

function updateKpisFromData(data){
  try{
    DLOG('Dashboard','updateKpisFromData', { items: data?.items?.length });
    const items = Array.isArray(data?.items) ? data.items : [];
    // This is page-scoped; authoritative unread is fetched via updateUnreadKpi()
    const unreadCount = items.filter(x => x.alertType === 'Obligatoire' && !x.isConfirmed).length;
    const today = new Date();
    today.setHours(0,0,0,0);
    const todayCount = items.filter(x => { const d = new Date(x.createdAt); return d >= today; }).length;
    const pendingCount = unreadCount;
    const confirmedMandatory = items.filter(x => x.alertType === 'Obligatoire' && x.isConfirmed).length;
    const setText = (id, val) => { const el = document.getElementById(id); if(el) el.textContent = String(val); };
    setText('kpiToday', todayCount);
    setText('kpiPending', pendingCount);
    setText('kpiConfirmedMandatory', confirmedMandatory);
  }catch{}
}

async function updateUnreadKpi(){
  try{
    console.log('[DEBUG] updateUnreadKpi start');
    const r = await fetch('/Alerts/UnreadCount', { cache:'no-store' });
    console.log('[DEBUG] updateUnreadKpi response:', r.status, r.statusText);
    if(!r.ok) return;
    const data = await r.json();
    console.log('[DEBUG] updateUnreadKpi data:', data);
    const count = typeof data === 'number' ? data : data.count || 0;
    const set = (id,v)=>{ const el=document.getElementById(id); if(el) el.textContent = String(v); };
    set('kpiPending', count);
    console.log('[DEBUG] updateUnreadKpi set kpiPending to:', count);
  }catch(e){
    console.error('[DEBUG] updateUnreadKpi error:', e);
  }
}

async function updateConfirmedMandatoryKpi(){
  try{
    console.log('[DEBUG] updateConfirmedMandatoryKpi start');
    const r = await fetch('/Alerts/ConfirmedMandatoryCount', { cache:'no-store' });
    console.log('[DEBUG] updateConfirmedMandatoryKpi response:', r.status, r.statusText);
    if(!r.ok) return;
    const data = await r.json();
    console.log('[DEBUG] updateConfirmedMandatoryKpi data:', data);
    const count = typeof data === 'number' ? data : data.count || 0;
    const el = document.getElementById('kpiConfirmedMandatory');
    if(el) el.textContent = String(count);
    console.log('[DEBUG] updateConfirmedMandatoryKpi set to:', count);
  }catch(e){
    console.error('[DEBUG] updateConfirmedMandatoryKpi error:', e);
  }
}

async function updateTodayKpi(){
  try{
    console.log('[DEBUG] updateTodayKpi start');
    const r = await fetch('/Alerts/TodayCount', { cache:'no-store' });
    console.log('[DEBUG] updateTodayKpi response:', r.status, r.statusText);
    if(!r.ok) return;
    const data = await r.json();
    console.log('[DEBUG] updateTodayKpi data:', data);
    const count = typeof data === 'number' ? data : data.count || 0;
    const el = document.getElementById('kpiToday');
    if(el) el.textContent = String(count);
    console.log('[DEBUG] updateTodayKpi set to:', count);
  }catch(e){
    console.error('[DEBUG] updateTodayKpi error:', e);
  }
}

// (filtres d√©partement supprim√©s)

async function confirmAlert(id){ await fetch('/Alerts/Confirm', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }
async function markRead(id){ await fetch('/Alerts/MarkRead', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }

// Fonctions pour le syst√®me de statut et d'annulation
function getAlertStatusHtml(alert) {
  // Par d√©faut, les alertes existantes sont "Envoy√©"  
  const status = alert.SendStatus || alert.sendStatus || alert.c1 || 'Sent';
  
  switch(status) {
    case 'Pending':
    case 'Sending':
      return `
        <span class="badge bg-warning text-dark">En cours</span>
        <button class="btn btn-sm btn-outline-danger ms-1" onclick="cancelAlert(${alert.alertId})" title="Annuler l'envoi">
          <span class="text-danger">‚úï</span>
        </button>
      `;
    case 'Sent':
      return `<span class="badge bg-success">Envoy√©</span>`;
    case 'Failed':
      return `<span class="badge bg-danger">√âchou√©</span>`;
    case 'Cancelled':
      return `<span class="badge bg-secondary">Annul√©</span>`;
    default:
      return `<span class="badge bg-success">Envoy√©</span>`;
  }
}

// Fonction pour annuler une alerte
async function cancelAlert(alertId) {
  console.groupCollapsed('%c[Cancel-old]','color:#dc3545');
  console.debug('[Cancel-old] alertId:', alertId);
  try {
    const response = await fetch('/AlertsCrud/Cancel', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `alertId=${alertId}`
    });
    
    const result = await response.json();
    console.debug('[Cancel-old] response:', result);
    if (result.success) {
      updateAlertStatus(alertId, 'Cancelled');
    } else {
      console.error('Erreur lors de l\'annulation:', result.message);
    }
  } catch (error) {
    console.error('Erreur lors de l\'annulation:', error);
  } finally { console.groupEnd(); }
}

// Fonction pour mettre √† jour le statut d'une alerte en temps r√©el
function updateAlertStatus(alertId, status) {
  const statusCell = document.getElementById(`status-cell-${alertId}`);
  if (statusCell) {
    const fakeAlert = { alertId, SendStatus: status };
    statusCell.innerHTML = getAlertStatusHtml(fakeAlert);
  }
}

// Fonction pour g√©rer une nouvelle alerte avec statut "En cours"
function handleNewAlert(alertId, title = 'Nouvelle alerte', recipientEmails = 'N/A') {
  // Ajouter imm√©diatement la nouvelle alerte √† la liste des envoy√©s
  addNewAlertToSentList(alertId, title, recipientEmails);
  
  // D√©marrer le timer de 10 secondes
  setTimeout(() => {
    // V√©rifier si l'alerte n'a pas √©t√© annul√©e
    const statusCell = document.getElementById(`status-cell-${alertId}`);
    if (statusCell && statusCell.innerHTML.includes('En cours')) {
      // Simuler l'envoi (sera remplac√© par le vrai statut via SignalR)
      updateAlertStatus(alertId, 'Sent');
    }
  }, 10000);
}

// Fonction pour ajouter une nouvelle alerte √† la liste des envoy√©s
function addNewAlertToSentList(alertId, title, recipientEmails) {
  const sentList = document.getElementById('sentList');
  if (!sentList) return;
  
  const now = new Date().toISOString();
  const newAlert = {
    alertId: alertId,
    createdAt: now,
    alertType: 'Information', // Par d√©faut
    title: title,
    recipientEmails: recipientEmails,
    SendStatus: 'Pending'
  };
  
  // Cr√©er la nouvelle ligne
  const newRow = `
    <tr id="sent-row-${alertId}">
      <td>${fmtPlus1(now)}</td>
      <td><span class="badge bg-info">Information</span></td>
      <td>${title}</td>
      <td><small class="text-muted">${recipientEmails}</small></td>
      <td id="status-cell-${alertId}">
        ${getAlertStatusHtml(newAlert)}
      </td>
    </tr>
  `;
  
  // Ajouter au d√©but du tableau
  const tbody = sentList.querySelector('tbody');
  if (tbody) {
    tbody.insertAdjacentHTML('afterbegin', newRow);
  } else {
    // Si pas de tableau, cr√©er un nouveau tableau
    sentList.innerHTML = `
      <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Emails</th><th scope="col">Statut</th></tr></thead>
        <tbody>${newRow}</tbody>
      </table>
    `;
  }
}

// Initial load
loadInbox();
updateUnreadKpi();
updateConfirmedMandatoryKpi();
updateTodayKpi();
if (document.getElementById('sentList')) loadSent();
// onglets supprim√©s

// Auto-refresh every 30 seconds for real-time updates
setInterval(() => {
  updateUnreadKpi();
  updateConfirmedMandatoryKpi();
  updateTodayKpi();
  // Refresh active tab content
  const activeTab = document.querySelector('.nav-link.active');
  if (activeTab) {
    const target = activeTab.getAttribute('data-bs-target');
    if (target === '#inbox') loadInbox();
    else if (target === '#sent' && document.getElementById('sentList')) loadSent();
    else if (target === '#dept' && document.getElementById('deptList')) loadDept();
    else if (target === '#all' && document.getElementById('allFilters')) loadAll();
  }
}, 30000);

// Real-time updates via SignalR
if (window.signalR && typeof signalR !== 'undefined'){
  const connection = new signalR.HubConnectionBuilder().withUrl('/hubs/notifications').withAutomaticReconnect().build();
  
  connection.on('historyChanged', ()=> {
    console.debug('[SignalR] historyChanged');
    loadInbox();
    updateUnreadKpi();
    updateConfirmedMandatoryKpi();
  });
  
  connection.on('sentChanged', ()=> { 
    console.debug('[SignalR] sentChanged');
    if (document.getElementById('sentList')) loadSent(); 
  });
  
  // √©v√©nements li√©s aux d√©partements retir√©s
  
  connection.on('newAlert', (payload)=> { 
    console.debug('[SignalR] newAlert', payload);
    // Desktop notification attempt
    try {
      if (window.Notification) {
        if (Notification.permission === 'default') { Notification.requestPermission().then(()=>{}); }
        if (Notification.permission === 'granted') {
          const n = new Notification(payload?.title || 'Nouvelle alerte', { body: payload?.message || '', icon: '/favicon.ico', tag: `alert-${payload?.alertId||''}` });
          n.onclick = ()=>{ try { window.focus(); if (payload?.alertId) window.location.href = `/AlertsCrud/Details/${payload.alertId}`; } catch(_){} };
          console.debug('[DesktopNotif] shown');
        } else {
          console.debug('[DesktopNotif] permission:', Notification.permission);
        }
      } else {
        console.debug('[DesktopNotif] Notification API not supported');
      }
    } catch (e) { console.warn('Desktop notification error', e); }
    loadInbox(); 
    updateUnreadKpi(); 
    updateConfirmedMandatoryKpi(); 
    updateTodayKpi();
    // Refresh active tab content
    const activeTab = document.querySelector('.nav-link.active');
    if (activeTab) {
      const target = activeTab.getAttribute('data-bs-target');
      if (target === '#sent' && document.getElementById('sentList')) loadSent();
      else if (target === '#dept' && document.getElementById('deptList')) loadDept();
      else if (target === '#all' && document.getElementById('allFilters')) loadAll();
    }
  });
  
  connection.on('alertsChanged', ()=> {
    console.debug('[SignalR] alertsChanged');
    // Refresh all tabs and KPIs
    loadInbox();
    updateUnreadKpi();
    updateConfirmedMandatoryKpi();
    updateTodayKpi();
    if (document.getElementById('sentList')) loadSent();
    // onglets retir√©s
  });
  // WhatsApp debug logs from server
  connection.on('waLog', (payload)=>{
    console.debug('[WhatsApp]', payload);
  });
  
  connection.on('badgeChanged', ()=> { 
    updateUnreadKpi(); 
    updateConfirmedMandatoryKpi(); 
    updateTodayKpi(); 
  });
  
  connection.on('alertStatusChanged', (alertId, status) => {
    console.debug('[SignalR] alertStatusChanged', { alertId, status });
    // Update the status in real-time
    updateAlertStatus(alertId, status);
  });
  
  connection.start().then(()=> console.info('[SignalR] connected')).catch(err => console.warn('SignalR connection failed:', err));
}

// Pending alerts management
let pendingAlerts = new Map();

function addPendingAlert(alertId, title, cancellationWindowSeconds = 5) {
  const endTime = Date.now() + (cancellationWindowSeconds * 1000);
  pendingAlerts.set(alertId, { title, endTime });
  updatePendingAlertsDisplay();
  
  // Auto-remove after cancellation window
  setTimeout(() => {
    pendingAlerts.delete(alertId);
    updatePendingAlertsDisplay();
  }, cancellationWindowSeconds * 1000);
}

function cancelAlert(alertId) {
  fetch(`/AlertsCrud/CancelAlert`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(alertId)
  })
  .then(r => r.json())
  .then(data => {
    if (data.success) {
      pendingAlerts.delete(alertId);
      updatePendingAlertsDisplay();
      showToast('Alerte annul√©e avec succ√®s', 'success');
    } else {
      showToast('Impossible d\'annuler l\'alerte', 'error');
    }
  })
  .catch(err => {
    console.error('Cancel failed:', err);
    showToast('Erreur lors de l\'annulation', 'error');
  });
}

function updatePendingAlertsDisplay() {
  const section = document.getElementById('pendingAlertsSection');
  const list = document.getElementById('pendingAlertsList');
  
  if (pendingAlerts.size === 0) {
    section.style.display = 'none';
    return;
  }
  
  section.style.display = 'block';
  let html = '';
  
  for (const [alertId, alert] of pendingAlerts) {
    const remainingSeconds = Math.max(0, Math.ceil((alert.endTime - Date.now()) / 1000));
    html += `
      <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
        <div>
          <strong>${alert.title}</strong>
          <div class="text-muted small">Temps restant: ${remainingSeconds}s</div>
        </div>
        <button class="btn btn-sm btn-outline-danger" onclick="cancelAlert(${alertId})" ${remainingSeconds <= 0 ? 'disabled' : ''}>
          Annuler
        </button>
      </div>
    `;
  }
  
  list.innerHTML = html;
  
  // Update countdown every second
  setTimeout(updatePendingAlertsDisplay, 1000);
}

// Toast notification system
function showToast(message, type = 'info') {
  const toastContainer = document.getElementById('toastContainer') || createToastContainer();
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0`;
  toast.setAttribute('role', 'alert');
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">${message}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast);
  bsToast.show();
  
  toast.addEventListener('hidden.bs.toast', () => toast.remove());
}

function createToastContainer() {
  const container = document.createElement('div');
  container.id = 'toastContainer';
  container.className = 'toast-container position-fixed top-0 end-0 p-3';
  container.style.zIndex = '1055';
  document.body.appendChild(container);
  return container;
}

// Modal Alert Functions
async function loadModalQuickAlerts() {
  try {
    const res = await fetch('/AlertsCrud/QuickList');
    const items = await res.json();
    const sel = document.getElementById('modalQuickSelect');
    if (sel) {
      sel.innerHTML = '<option value="">-- S√©lectionner --</option>';
      items.forEach(x => {
        const o = document.createElement('option');
        o.value = x.alertId;
        o.textContent = x.title;
        sel.appendChild(o);
      });
    }
  } catch (error) {
    console.error('Error loading quick alerts:', error);
  }
}

async function loadModalRecipients() {
  try {
    const res = await fetch('/AlertsCrud/Recipients');
    const items = await res.json();
    console.debug('[Recipients] loaded:', Array.isArray(items)? items.length : items);
    if (Array.isArray(items)) {
      const ids = items.map(x=>x.userId);
      console.debug('[Recipients] ids sample:', ids.slice(0,20));
    }
    const container = document.getElementById('modalRecipients');
    if (container) {
      container.innerHTML = '';
      
      if (items.length === 0) {
        container.innerHTML = '<div class="text-muted text-center p-3">Aucun destinataire disponible</div>';
        return;
      }
      
      items.forEach(x => {
        const checkboxDiv = document.createElement('div');
        checkboxDiv.className = 'form-check mb-2 p-2 border-bottom';
        checkboxDiv.dataset.department = x.departmentId || '';
        checkboxDiv.dataset.role = x.role || '';
        
        const checkbox = document.createElement('input');
        checkbox.className = 'form-check-input';
        checkbox.type = 'checkbox';
        checkbox.id = `recipient_${x.userId}`;
        checkbox.value = x.userId;
        checkbox.name = 'recipients';
        
        const label = document.createElement('label');
        label.className = 'form-check-label w-100';
        label.htmlFor = `recipient_${x.userId}`;
        label.style.cursor = 'pointer';
        
        // Cr√©er le contenu du label avec ic√¥nes selon le r√¥le
        const roleIcon = x.role === 'Admin' ? 'üëë' : x.role === 'SuperUser' ? '‚≠ê' : 'üë§';
        const deptBadge = x.departmentName ? `<span class="badge bg-secondary ms-2">${x.departmentName}</span>` : '';
        
        label.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong>${roleIcon} ${x.username}</strong>
              <div class="text-muted small">${x.email || 'Pas d\'email'}</div>
            </div>
            ${deptBadge}
          </div>
        `;
        
        // Ajouter un event listener pour mettre √† jour le compteur
        checkbox.addEventListener('change', updateRecipientCount);
        
        checkboxDiv.appendChild(checkbox);
        checkboxDiv.appendChild(label);
        container.appendChild(checkboxDiv);
      });
      
      // Filter functionality
      const searchInput = document.getElementById('modalRecipientsSearch');
      if (searchInput) {
        // Remove existing event listener if any
        searchInput.removeEventListener('input', filterCheckboxes);
        searchInput.addEventListener('input', filterCheckboxes);
      }
    }
  } catch (error) {
    console.error('Error loading recipients:', error);
    const container = document.getElementById('modalRecipients');
    if (container) {
      container.innerHTML = '<div class="text-danger text-center p-3">Erreur lors du chargement des destinataires</div>';
    }
  }
}

function filterCheckboxes(event) {
  const searchTerm = event.target.value.toLowerCase();
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxDivs = container.querySelectorAll('.form-check');
    checkboxDivs.forEach(div => {
      const text = div.textContent.toLowerCase();
      div.style.display = text.includes(searchTerm) ? '' : 'none';
    });
  }
}

function updateRecipientCount() {
  const container = document.getElementById('modalRecipients');
  const countBadge = document.getElementById('recipientCount');
  if (container && countBadge) {
    const checkedCount = container.querySelectorAll('input[type="checkbox"]:checked').length;
    countBadge.textContent = `${checkedCount} s√©lectionn√©(s)`;
    countBadge.className = checkedCount > 0 ? 'badge bg-success' : 'badge bg-primary';
  }
}

// Modal Event Handlers
document.getElementById('modalQuickSelect')?.addEventListener('change', async function() {
  if (!this.value) {
    // Clear fields when no selection
    document.getElementById('modalTitle').value = '';
    document.getElementById('modalMessage').value = '';
    document.getElementById('modalAlertType').value = 'Information';
    return;
  }
  
  try {
    const res = await fetch(`/AlertsCrud/GetAlertDetails/${this.value}`);
    if (res.ok) {
      const data = await res.text();
      let alert;
      
      try {
        alert = JSON.parse(data);
      } catch (e) {
        console.error('Response is not JSON:', data);
        showToast('Erreur lors du chargement de l\'alerte', 'error');
        return;
      }
      
      // Fill form fields
      if (alert.title) document.getElementById('modalTitle').value = alert.title;
      if (alert.message) document.getElementById('modalMessage').value = alert.message;
      if (alert.alertType) document.getElementById('modalAlertType').value = alert.alertType;
      
      showToast('Alerte rapide charg√©e', 'success');
    } else {
      console.error('HTTP error:', res.status, res.statusText);
      showToast('Alerte introuvable', 'error');
    }
  } catch (error) {
    console.error('Error loading alert details:', error);
    showToast('Erreur r√©seau', 'error');
  }
});

document.getElementById('modalSaveBtn')?.addEventListener('click', async function() {
  const title = document.getElementById('modalTitle')?.value?.trim();
  const message = document.getElementById('modalMessage')?.value?.trim();
  const alertType = document.getElementById('modalAlertType')?.value;
  const departmentId = '';
  
  if (!title || !message) {
    showToast('Titre et message requis pour enregistrer', 'error');
    return;
  }
  
  try {
    const formData = new FormData();
    formData.append('title', title);
    formData.append('message', message);
    formData.append('alertType', alertType);
    formData.append('departmentId', departmentId);
    
    const res = await fetch('/AlertsCrud/QuickSave', { method: 'POST', body: formData });
    
    if (res.ok) {
      showToast('Alerte rapide enregistr√©e avec succ√®s !', 'success');
      await loadModalQuickAlerts(); // Refresh the quick alerts list
    } else {
      showToast('Erreur lors de l\'enregistrement', 'error');
    }
  } catch (error) {
    console.error('Error saving quick alert:', error);
    showToast('Erreur r√©seau', 'error');
  }
});

        document.getElementById('modalSendBtn')?.addEventListener('click', async function() {
          const title = document.getElementById('modalTitle')?.value?.trim();
          const message = document.getElementById('modalMessage')?.value?.trim();
          const alertType = document.getElementById('modalAlertType')?.value;
          const departmentId = '';
          
          // Construire les destinataires √† partir des coordonn√©es saisies
          const emailsRaw = document.getElementById('emailsInput')?.value || '';
          const whatsRaw = document.getElementById('whatsInput')?.value || '';
          const deviceIdsRaw = document.getElementById('deviceIdsInput')?.value || '';
          const splitList = (s)=> s.split(/[;,\n]+/).map(x=>x.trim()).filter(Boolean);
          const emails = splitList(emailsRaw);
          const phones = splitList(whatsRaw);
          const deviceIds = splitList(deviceIdsRaw);
          const recipients = [];
          emails.forEach(e=> recipients.push({ externalRecipientId: e }));
          phones.forEach(p=> recipients.push({ externalRecipientId: p }));
          deviceIds.forEach(d=> recipients.push({ externalRecipientId: d }));
          
          // R√©cup√©rer les plateformes s√©lectionn√©es
          const selectedPlatforms = [];
          if (document.getElementById('platformEmail')?.checked) selectedPlatforms.push('email');
          if (document.getElementById('platformWhatsApp')?.checked) selectedPlatforms.push('whatsapp');
          if (document.getElementById('platformDesktop')?.checked) selectedPlatforms.push('desktop');
          console.log('[DEBUG] Send button clicked');
          console.log('[DEBUG] Form data:', { title, message, alertType, departmentId });
          console.log('[DEBUG] Raw inputs:', { emailsRaw, whatsRaw, deviceIdsRaw });
          console.log('[DEBUG] Parsed recipients:', { emails, phones, deviceIds });
          console.log('[DEBUG] Final recipients array:', recipients);
          console.log('[DEBUG] Selected platforms:', selectedPlatforms);
  
          if (!title) {
            showToast('Titre requis', 'error');
            return;
          }
          
          if (selectedPlatforms.length === 0) {
            showToast('Veuillez s√©lectionner au moins une plateforme d\'envoi', 'error');
            return;
          }
  
  try {
    // Appeler l'API v1 directement
    const apiKey = localStorage.getItem('apiKey') || '';
    const payload = {
      title,
      message,
      alertType: alertType === 'Obligatoire' ? 'acquittementN√©cessaire' : 'acquittementNonN√©cessaire',
      expedType: 'Humain',
      appId: 1,
      expediteurId: null,
      recipients
    };
    console.log('[DEBUG] API call starting...');
    console.log('[DEBUG] API Key present:', !!apiKey);
    console.log('[DEBUG] POST /api/v1/alerts payload:', payload);
    
    const headers = { 'Content-Type': 'application/json' };
    if (apiKey) headers['X-Api-Key'] = apiKey;
    console.log('[DEBUG] Request headers:', headers);
    
    const res = await fetch('/api/v1/alerts', { 
      method: 'POST',
      headers,
      body: JSON.stringify(payload)
    });
    
    console.log('[DEBUG] Response status:', res.status, res.statusText);
    
    if (res.ok) {
      const data = await res.json();
      console.log('[DEBUG] Response data:', data);
      if (data && (data.id || data.alertId)) {
        console.log('[DEBUG] Alert created successfully with ID:', data.id || data.alertId);
        showToast(`Alerte cr√©√©e ‚Äî destinataires: ${recipients.length}`, 'success');
        
        // Add to pending alerts for cancellation with new system
        if (typeof handleNewAlert === 'function') {
          const recipientEmails = data.attemptedEmails ? data.attemptedEmails.join(', ') : 'N/A';
          handleNewAlert(data.alertId, title, recipientEmails);
        }
        
        // Refresh sent data
        setTimeout(() => {
          if (typeof loadSent === 'function') {
            loadSent();
          }
        }, 500);
        
        // Clear form and close modal
        document.getElementById('modalTitle').value = '';
        document.getElementById('modalMessage').value = '';
        document.getElementById('modalQuickSelect').value = '';
        document.getElementById('emailsInput').value = '';
        document.getElementById('whatsInput').value = '';
        document.getElementById('deviceIdsInput').value = '';
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('newAlertModal'));
        modal?.hide();
      } else {
        showToast('Erreur: Pas d\'ID alerte retourn√©', 'error');
      }
    } else {
      console.log('[DEBUG] API call failed with status:', res.status);
      try { 
        const errText = await res.text(); 
        console.error('[DEBUG] Error response body:', errText); 
        showToast(`Erreur HTTP ${res.status}: ${errText}`, 'error');
      } catch (e) {
        console.error('[DEBUG] Could not read error response:', e);
        showToast(`Erreur HTTP ${res.status}`, 'error');
      }
    }
  } catch (error) {
    console.error('[DEBUG] Network/JS error sending alert:', error);
    showToast('Erreur r√©seau: ' + error.message, 'error');
  }
});

// Initialize modal data when modal is shown
// Fonctions pour la s√©lection rapide des destinataires
function selectAllRecipients() {
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxes = container.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.checked = true;
    });
    updateRecipientCount();
  }
}

function clearAllRecipients() {
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxes = container.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    updateRecipientCount();
  }
}

function selectByDepartment() {
  const departmentSelect = document.getElementById('modalDepartment');
  const container = document.getElementById('modalRecipients');
  
  if (!departmentSelect || !container) return;
  
  const selectedDept = departmentSelect.value;
  if (!selectedDept) {
    showToast('Veuillez d\'abord s√©lectionner un d√©partement', 'warning');
    return;
  }
  
  // Clear current selection
  clearAllRecipients();
  
  // Select recipients from the chosen department
  const checkboxDivs = container.querySelectorAll('.form-check');
  checkboxDivs.forEach(div => {
    if (div.dataset.department === selectedDept) {
      const checkbox = div.querySelector('input[type="checkbox"]');
      if (checkbox) checkbox.checked = true;
    }
  });
  updateRecipientCount();
}


document.getElementById('newAlertModal')?.addEventListener('shown.bs.modal', function() {
  loadModalQuickAlerts();
  // afficher/cacher blocs selon plateformes
  toggleContactBlocks?.();
});

// Affichage dynamique des blocs de coordonn√©es en fonction des plateformes
function toggleContactBlocks(){
  const showEmail = document.getElementById('platformEmail')?.checked;
  const showWhats = document.getElementById('platformWhatsApp')?.checked;
  const showDesktop = document.getElementById('platformDesktop')?.checked;
  document.getElementById('emailBlock').style.display = showEmail? 'block':'none';
  document.getElementById('whatsBlock').style.display = showWhats? 'block':'none';
  document.getElementById('desktopBlock').style.display = showDesktop? 'block':'none';
}
// Utiliser une boucle classique pour compatibilit√© Razor
var platformIds = ['platformEmail','platformWhatsApp','platformDesktop'];
for (var i = 0; i < platformIds.length; i++) {
  var id = platformIds[i];
  document.getElementById(id)?.addEventListener('change', toggleContactBlocks);
}
toggleContactBlocks();

// Helpers pour champs ‚Äútags‚Äù (emails / whatsApp)
function initTagInput(containerId, hiddenInputId, validator){
  const container = document.getElementById(containerId);
  const hidden = document.getElementById(hiddenInputId);
  if (!container || !hidden) return;
  const items = new Set();
  const input = document.createElement('input');
  input.type = 'text';
  input.className = 'border-0 flex-grow-1';
  input.style.outline = 'none';
  input.placeholder = 'Tapez et appuyez Entr√©e';
  container.appendChild(input);

  function render(){
    container.querySelectorAll('.tag-item').forEach(e=>e.remove());
    items.forEach(v=>{
      const tag = document.createElement('span');
      tag.className = 'tag-item badge bg-light text-dark border';
      tag.innerHTML = `${v} <span role="button" class="ms-1 text-danger">√ó</span>`;
      tag.querySelector('span').onclick = ()=>{ items.delete(v); render(); };
      container.insertBefore(tag, input);
    });
    hidden.value = Array.from(items).join(',');
  }

  function tryAdd(value){
    const v = value.trim();
    if (!v) return;
    if (!validator(v)) { input.classList.add('is-invalid'); return; }
    input.classList.remove('is-invalid');
    items.add(v);
    input.value='';
    render();
  }

  // Eviter les tableaux litt√©raux pour compatibilit√© Razor
  const submitKeys = { 'Enter': true, ',': true, ';': true };
  input.addEventListener('keydown', (e)=>{
    if (submitKeys[e.key]) { e.preventDefault(); tryAdd(input.value); }
    if (e.key === 'Backspace' && input.value === '' && items.size>0) { items.delete(Array.from(items).pop()); render(); }
  });
  input.addEventListener('paste', (e)=>{
    e.preventDefault();
    const text = (e.clipboardData||window.clipboardData).getData('text');
    const normalized = text.replace(/[; ,\n]+/g, ',');
    normalized.split(',').forEach(tryAdd);
  });

  render();
}

function isValidEmail(v){
  // Doubler le caract√®re @@ pour Razor: @@
  return /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(v);
}
function isValidPhone(v){
  return /^\+?[0-9]{8,15}$/.test(v.replace(/\s|-/g,''));
}

// initialiser les champs tags
initTagInput('emailsTags','emailsInput', isValidEmail);
initTagInput('whatsTags','whatsInput', isValidPhone);

// API Key Management
document.addEventListener('DOMContentLoaded', function() {
  console.log('[DEBUG] Initializing API key management');
  
  // Load saved API key on page load
  const savedApiKey = localStorage.getItem('apiKey');
  if (savedApiKey) {
    document.getElementById('apiKeyInput').value = savedApiKey;
    console.log('[DEBUG] Loaded API key from localStorage');
    testApiKey(savedApiKey, false); // Test silently on load
  }

  // Toggle API key visibility
  document.getElementById('toggleApiKeyBtn')?.addEventListener('click', function() {
    const input = document.getElementById('apiKeyInput');
    const icon = this.querySelector('i');
    if (input.type === 'password') {
      input.type = 'text';
      icon.className = 'bi bi-eye-slash';
    } else {
      input.type = 'password';
      icon.className = 'bi bi-eye';
    }
    console.log('[DEBUG] Toggled API key visibility');
  });

  // Save API key
  document.getElementById('saveApiKeyBtn')?.addEventListener('click', function() {
    const apiKey = document.getElementById('apiKeyInput').value.trim();
    console.log('[DEBUG] Saving API key, length:', apiKey.length);
    
    if (apiKey) {
      localStorage.setItem('apiKey', apiKey);
      showApiKeyStatus('Cl√© API sauvegard√©e avec succ√®s', 'success');
      console.log('[DEBUG] API key saved to localStorage');
    } else {
      localStorage.removeItem('apiKey');
      showApiKeyStatus('Cl√© API supprim√©e', 'info');
      console.log('[DEBUG] API key removed from localStorage');
    }
  });

  // Test API key
  document.getElementById('testApiKeyBtn')?.addEventListener('click', function() {
    const apiKey = document.getElementById('apiKeyInput').value.trim();
    console.log('[DEBUG] Testing API key, length:', apiKey.length);
    
    if (!apiKey) {
      showApiKeyStatus('Veuillez entrer une cl√© API', 'warning');
      return;
    }
    
    testApiKey(apiKey, true);
  });
});

async function testApiKey(apiKey, showResult = true) {
  console.log('[DEBUG] testApiKey called, showResult:', showResult);
  
  try {
    const response = await fetch('/api/v1/keys/validate', {
      method: 'GET',
      headers: {
        'X-Api-Key': apiKey,
        'Content-Type': 'application/json'
      }
    });

    console.log('[DEBUG] API key test response:', response.status, response.statusText);
    
    if (response.ok) {
      const data = await response.json();
      console.log('[DEBUG] API key test success:', data);
      if (showResult) {
        showApiKeyStatus('‚úÖ Cl√© API valide et active', 'success');
      }
      return true;
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log('[DEBUG] API key test failed:', errorData);
      if (showResult) {
        showApiKeyStatus('‚ùå Cl√© API invalide ou inactive', 'danger');
      }
      return false;
    }
  } catch (error) {
    console.error('[DEBUG] API key test error:', error);
    if (showResult) {
      showApiKeyStatus('‚ùå Erreur de connexion: ' + error.message, 'danger');
    }
    return false;
  }
}

function showApiKeyStatus(message, type) {
  const statusDiv = document.getElementById('apiKeyStatus');
  if (!statusDiv) return;
  
  const alertClass = `alert alert-${type}`;
  statusDiv.innerHTML = `<div class="${alertClass} alert-dismissible fade show" role="alert">
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>`;
  
  console.log('[DEBUG] API key status shown:', message, type);
  
  // Auto-hide success messages after 3 seconds
  if (type === 'success') {
    setTimeout(() => {
      const alert = statusDiv.querySelector('.alert');
      if (alert) {
        const bsAlert = new bootstrap.Alert(alert);
        bsAlert.close();
      }
    }, 3000);
  }
}
</script>
}


