@{
    ViewData["Title"] = "Dashboard";
    var role = (string?)ViewBag.Role ?? "";
    var departments = ViewBag.Departments as List<AlertSystem.Models.Entities.Department>;
}
<div class="container py-3">
  <div class="mb-3">
    <h3 class="mb-1">Tableau de bord</h3>
    <div class="text-muted">Bienvenue @ViewBag.DisplayName ‚Äî R√¥le: @role</div>
  </div>

  <div class="row g-3 mb-3" id="kpiRow">
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Alertes du jour</div>
              <div class="kpi-value" id="kpiToday">‚Äî</div>
            </div>
            <span class="kpi-dot bg-primary"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires en attente</div>
              <div class="kpi-value" id="kpiPending">‚Äî</div>
            </div>
            <span class="kpi-dot bg-warning"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires confirm√©es</div>
              <div class="kpi-value" id="kpiConfirmedMandatory">‚Äî</div>
            </div>
            <span class="kpi-dot bg-success"></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <ul class="nav nav-tabs" id="tabs" role="tablist">
    <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#inbox" type="button"><span class="me-1" aria-hidden="true">üì•</span> Bo√Æte de r√©ception</button></li>
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase) || string.Equals(role, "User", StringComparison.OrdinalIgnoreCase) || string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#sent" type="button"><span class="me-1" aria-hidden="true">üì§</span> Envoy√©es</button></li>
    }
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#dept" type="button"><span class="me-1" aria-hidden="true">üè¢</span> Historique d√©partement</button></li>
    }
    @if (string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#all" type="button"><span class="me-1" aria-hidden="true">üóÇÔ∏è</span> Tous (admin)</button></li>
    }
  </ul>
  <div class="tab-content card shadow-sm border-0 p-3">
    <div class="tab-pane fade show active" id="inbox">
      <div id="inboxList">Chargement...</div>
    </div>
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase)) {
    <div class="tab-pane fade" id="sent">
      <div id="sentList">Chargement...</div>
    </div>
    <div class="tab-pane fade" id="dept">
      <form class="row g-2 mb-2" id="deptFilters">
        <div class="col-auto">
          <select name="type" class="form-select">
            <option value="">Tous types</option>
            <option value="Information">Information</option>
            <option value="Obligatoire">Obligatoire</option>
          </select>
        </div>
        <div class="col-auto">
          <select name="status" class="form-select">
            <option value="all">Tous statuts</option>
            <option value="unread">Non lus</option>
            <option value="confirmed">Lu</option>
          </select>
        </div>
        <div class="col-auto"><input type="date" name="from" class="form-control" /></div>
        <div class="col-auto"><input type="date" name="to" class="form-control" /></div>
        <div class="col-auto"><button class="btn btn-outline-secondary" type="submit">Filtrer</button></div>
      </form>
      <div id="deptList">Chargement...</div>
    </div>
    }
    @if (string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
    <div class="tab-pane fade" id="all">
      <form class="row g-2 mb-2" id="allFilters">
        <div class="col-auto">
          <select name="departmentId" class="form-select">
            <option value="">Tous d√©partements</option>
            @foreach (var d in departments!) { <option value="@d.DepartmentId">@d.Name</option> }
          </select>
        </div>
        <div class="col-auto">
          <select name="type" class="form-select">
            <option value="">Tous types</option>
            <option value="Information">Information</option>
            <option value="Obligatoire">Obligatoire</option>
          </select>
        </div>
        <div class="col-auto"><input type="date" name="from" class="form-control" /></div>
        <div class="col-auto"><input type="date" name="to" class="form-control" /></div>
        <div class="col-auto"><button class="btn btn-outline-secondary" type="submit">Filtrer</button></div>
      </form>
      <div class="d-flex justify-content-end mb-2">
        <a id="exportCsvBtn" class="btn btn-sm btn-outline-primary" href="#">Exporter CSV</a>
      </div>
      <div id="allList">Chargement...</div>
    </div>
    }
  </div>
</div>

@section Scripts {
<script>
async function fetchJson(url){ const r = await fetch(url, { cache:'no-store' }); return await r.json(); }
function fmtPlus1(dateIso){ const d = new Date(dateIso); return new Date(d.getTime()+3600000).toLocaleString(); }

async function loadInbox(){
  // Afficher toutes les alertes (lues et non lues) avec leur statut
  const data = await fetchJson('/Alerts/HistoryData?status=all&page=1&size=10');
  renderList('inboxList', data, true);
  updateKpisFromData(data);
  updateUnreadKpi();
}
async function loadSent(){
  const data = await fetchJson('/Alerts/SentData?page=1&size=10');
  renderListCustom('sentList', data);
}
async function loadDept(){
  const params = new URLSearchParams(new FormData(document.getElementById('deptFilters')));
  const data = await fetchJson('/Alerts/DeptData?' + params.toString() + '&page=1&size=10');
  renderListCustom('deptList', data);
}
async function loadAll(){
  const params = new URLSearchParams(new FormData(document.getElementById('allFilters')));
  const r = await fetch(`/Alerts/HistoryData?${params.toString()}&page=1&size=20`);
  const data = await r.json();
  renderList('allList', data, false, true);
  document.getElementById('exportCsvBtn').setAttribute('href', `/Alerts/ExportCsv?${params.toString()}`);
  updateKpisFromData(data);
  updateUnreadKpi();
}

function renderList(targetId, data, canConfirm, adminView=false){
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  el.innerHTML = `
    <table class="table table-sm align-middle">
      <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Statut</th><th scope="col" class="text-end">Actions</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>
            ${x.alertType==='Obligatoire' ? '<span class="badge badge-type-obl">Obligatoire</span>' : '<span class="badge badge-type-info">Information</span>'}
          </td>
          <td>${x.title}</td>
          <td>${x.alertType==='Obligatoire' ? (x.isRead ? '<span class="badge badge-status-lu">Lu</span>' : '<span class="badge badge-status-nonlu">Non lu</span>') : ''}</td>
          <td class="text-end">
            ${(!adminView && x.alertType==='Obligatoire' && !x.isRead && canConfirm) ? `<button class="btn btn-outline-secondary btn-sm me-2" onclick="markRead(${x.alertRecipientId})" aria-label="Marquer l'alerte comme lue">Marquer lu</button>` : ''}
            <a class="btn btn-primary btn-sm" href="/AlertsCrud/Details/${x.alertId}">Acc√©der</a>
          </td>
        </tr>`).join('')}
      </tbody>
    </table>`;
}

function renderListCustom(targetId, data){
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  el.innerHTML = `
    <table class="table table-sm align-middle">
      <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Exp√©diteur</th><th scope="col">Destinataire</th><th scope="col">Statut</th><th scope="col">Heure de r√©ception</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>${x.alertType}</td>
          <td>${x.title}</td>
          <td>${x.sender}</td>
          <td>${x.recipient}</td>
          <td>${x.alertType==='Obligatoire' ? (x.isRead ? 'Lu' : 'Non lu') : ''}</td>
          <td>${x.isRead && x.confirmedAt ? fmtPlus1(x.confirmedAt) : ''}</td>
        </tr>`).join('')}
      </tbody>
    </table>`;
}

function updateKpisFromData(data){
  try{
    const items = Array.isArray(data?.items) ? data.items : [];
    // This is page-scoped; authoritative unread is fetched via updateUnreadKpi()
    const unreadCount = items.filter(x => x.alertType === 'Obligatoire' && !x.isRead).length;
    const today = new Date();
    today.setHours(0,0,0,0);
    const todayCount = items.filter(x => { const d = new Date(x.createdAt); return d >= today; }).length;
    const pendingCount = unreadCount;
    const confirmedMandatory = items.filter(x => x.alertType === 'Obligatoire' && x.isRead).length;
    const setText = (id, val) => { const el = document.getElementById(id); if(el) el.textContent = String(val); };
    setText('kpiToday', todayCount);
    setText('kpiPending', pendingCount);
    setText('kpiConfirmedMandatory', confirmedMandatory);
  }catch{}
}

async function updateUnreadKpi(){
  try{
    const r = await fetch('/Alerts/UnreadCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const set = (id,v)=>{ const el=document.getElementById(id); if(el) el.textContent = String(v); };
    set('kpiPending', count);
  }catch{}
}

async function updateConfirmedMandatoryKpi(){
  try{
    const r = await fetch('/Alerts/ConfirmedMandatoryCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const el = document.getElementById('kpiConfirmedMandatory');
    if(el) el.textContent = String(count);
  }catch{}
}

async function updateTodayKpi(){
  try{
    const r = await fetch('/Alerts/TodayCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const el = document.getElementById('kpiToday');
    if(el) el.textContent = String(count);
  }catch{}
}

document.getElementById('allFilters')?.addEventListener('submit', (e)=>{ e.preventDefault(); loadAll(); });
document.getElementById('deptFilters')?.addEventListener('submit', (e)=>{ e.preventDefault(); loadDept(); });

async function confirmAlert(id){ await fetch('/Alerts/Confirm', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }
async function markRead(id){ await fetch('/Alerts/MarkRead', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }

loadInbox();
updateUnreadKpi();
updateConfirmedMandatoryKpi();
updateTodayKpi();
if (document.getElementById('sentList')) loadSent();
if (document.getElementById('deptList')) loadDept();
if (document.getElementById('allFilters')) { loadAll(); }

// Temps r√©el via SignalR
if (window.signalR){
  const connection = new signalR.HubConnectionBuilder().withUrl('/hubs/notifications').withAutomaticReconnect().build();
  connection.on('historyChanged', ()=> loadInbox());
  connection.on('sentChanged', ()=> { if (document.getElementById('sentList')) loadSent(); });
  connection.on('deptChanged', ()=> { if (document.getElementById('deptList')) loadDept(); });
  connection.on('badgeChanged', ()=> { updateUnreadKpi(); updateConfirmedMandatoryKpi(); updateTodayKpi(); /* badge c√¥t√© layout d√©j√† branch√© au besoin */});
  connection.start();
}
</script>
}


