@{
    ViewData["Title"] = "Dashboard";
    var role = (string?)ViewBag.Role ?? "";
    var departments = ViewBag.Departments as List<AlertSystem.Models.Entities.Department>;
}
<div class="container py-3">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <h3 class="mb-1">Tableau de bord</h3>
    <div class="text-muted">Bienvenue @ViewBag.DisplayName ‚Äî R√¥le: @role</div>
    </div>
    <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#newAlertModal" style="font-size: 1.1rem;">
      <i class="bi bi-plus-circle me-2"></i>Nouvelle alerte
    </button>
  </div>

  <!-- Pending Alerts Section -->
  <div class="row mb-3" id="pendingAlertsSection" style="display: none;">
    <div class="col-12">
      <div class="card border-warning">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">‚è≥ Alertes en cours d'envoi</h5>
        </div>
        <div class="card-body" id="pendingAlertsList">
          <!-- Populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <div class="row g-3 mb-3" id="kpiRow">
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Alertes du jour</div>
              <div class="kpi-value" id="kpiToday">‚Äî</div>
            </div>
            <span class="kpi-dot bg-primary"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires en attente</div>
              <div class="kpi-value" id="kpiPending">‚Äî</div>
            </div>
            <span class="kpi-dot bg-warning"></span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-12 col-md-6 col-lg-3">
      <div class="card shadow-sm kpi-card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start">
            <div>
              <div class="kpi-label">Obligatoires confirm√©es</div>
              <div class="kpi-value" id="kpiConfirmedMandatory">‚Äî</div>
            </div>
            <span class="kpi-dot bg-success"></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <ul class="nav nav-tabs" id="tabs" role="tablist">
    <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#inbox" type="button"><span class="me-1" aria-hidden="true">üì•</span> Bo√Æte de r√©ception</button></li>
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase) || string.Equals(role, "User", StringComparison.OrdinalIgnoreCase) || string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#sent" type="button"><span class="me-1" aria-hidden="true">üì§</span> Envoy√©es</button></li>
    }
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#dept" type="button"><span class="me-1" aria-hidden="true">üè¢</span> Mon d√©partement</button></li>
    }
    @if (string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
      <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#all" type="button"><span class="me-1" aria-hidden="true">üóÇÔ∏è</span> Tous d√©partements</button></li>
    }
  </ul>
  <div class="tab-content card shadow-sm border-0 p-3">
    <div class="tab-pane fade show active" id="inbox">
      <div id="inboxList">Chargement...</div>
    </div>
    @if (string.Equals(role, "SuperUser", StringComparison.OrdinalIgnoreCase) || string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
    <div class="tab-pane fade" id="sent">
      <div id="sentList">Chargement...</div>
    </div>
    <div class="tab-pane fade" id="dept">
      <form class="row g-2 mb-2 align-items-end" id="deptFilters">
        <div class="col-auto">
          <label class="form-label small">Type</label>
          <select name="type" class="form-select">
            <option value="">Tous types</option>
            <option value="Information">Information</option>
            <option value="Obligatoire">Obligatoire</option>
          </select>
        </div>
        <div class="col-auto">
          <label class="form-label small">Statut</label>
          <select name="status" class="form-select">
            <option value="all">Tous statuts</option>
            <option value="unread">Non lus</option>
            <option value="confirmed">Lu</option>
          </select>
        </div>
        <div class="col-auto">
          <label class="form-label small">Du</label>
          <input type="date" name="from" class="form-control" />
        </div>
        <div class="col-auto">
          <label class="form-label small">Au</label>
          <input type="date" name="to" class="form-control" />
        </div>
        <div class="col-auto">
          <button class="btn btn-outline-secondary" type="submit">Filtrer</button>
        </div>
      </form>
      <div id="deptList">Chargement...</div>
    </div>
    }
    @if (string.Equals(role, "Admin", StringComparison.OrdinalIgnoreCase)) {
    <div class="tab-pane fade" id="all">
      <form class="row g-2 mb-2 align-items-end" id="allFilters">
        <div class="col-auto">
          <label class="form-label small">D√©partement</label>
          <select name="departmentId" class="form-select">
            <option value="">Tous d√©partements</option>
            @foreach (var d in departments!) { <option value="@d.DepartmentId">@d.Name</option> }
          </select>
        </div>
        <div class="col-auto">
          <label class="form-label small">Type</label>
          <select name="type" class="form-select">
            <option value="">Tous types</option>
            <option value="Information">Information</option>
            <option value="Obligatoire">Obligatoire</option>
          </select>
        </div>
        <div class="col-auto">
          <label class="form-label small">Du</label>
          <input type="date" name="from" class="form-control" />
        </div>
        <div class="col-auto">
          <label class="form-label small">Au</label>
          <input type="date" name="to" class="form-control" />
        </div>
        <div class="col-auto">
          <button class="btn btn-outline-secondary" type="submit">Filtrer</button>
        </div>
        <div class="col-auto ms-auto">
          <a id="exportCsvBtn" class="btn btn-sm btn-outline-primary" href="#">Exporter CSV</a>
        </div>
      </form>
      <div id="allList">Chargement...</div>
    </div>
    }
  </div>
</div>

<!-- Modal Nouvelle Alerte -->
<div class="modal fade" id="newAlertModal" tabindex="-1" aria-labelledby="newAlertModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h4 class="modal-title" id="newAlertModalLabel">
          <i class="bi bi-bell me-2"></i>Nouvelle alerte
        </h4>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Section Alertes rapides -->
        <div class="card border-primary mb-4">
          <div class="card-header bg-primary text-white">
            <h6 class="mb-0"><i class="bi bi-lightning me-1"></i>Alertes rapides</h6>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-8">
                <select id="modalQuickSelect" class="form-select">
                  <option value="">-- S√©lectionner une alerte rapide --</option>
                </select>
              </div>
              <div class="col-md-4 text-end">
                <small class="text-muted">S√©lectionnez pour remplir automatiquement</small>
              </div>
            </div>
          </div>
        </div>

        <!-- Formulaire principal -->
        <form id="newAlertForm">
          <div class="row g-3">
            <!-- Titre -->
            <div class="col-12">
              <label class="form-label fw-bold">
                <i class="bi bi-pencil me-1"></i>Titre de l'alerte *
              </label>
              <input id="modalTitle" class="form-control" required placeholder="Entrez le titre de l'alerte..." />
            </div>
            
            <!-- Message -->
            <div class="col-12">
              <label class="form-label fw-bold">
                <i class="bi bi-chat-text me-1"></i>Message
              </label>
              <textarea id="modalMessage" class="form-control" rows="4" placeholder="Entrez le message de l'alerte..."></textarea>
            </div>
            
            <!-- Type et D√©partement -->
            <div class="col-md-6">
              <label class="form-label fw-bold">
                <i class="bi bi-tag me-1"></i>Type d'alerte
              </label>
              <select id="modalAlertType" class="form-select">
                <option value="Information">üìÑ Information</option>
                <option value="Obligatoire">‚ö†Ô∏è Obligatoire</option>
              </select>
            </div>
            
            @if (User.IsInRole("Admin"))
            {
              <div class="col-md-6">
                <label class="form-label fw-bold">
                  <i class="bi bi-building me-1"></i>D√©partement
                </label>
                <select id="modalDepartment" class="form-select">
                  <option value="">-- Tous les d√©partements --</option>
                  @if (departments != null)
                  {
                    @foreach (var dept in departments)
                    {
                      <option value="@dept.DepartmentId">@dept.Name</option>
                    }
                  }
                </select>
              </div>
            }
            else
            {
              <div class="col-md-6">
                <label class="form-label fw-bold">
                  <i class="bi bi-building me-1"></i>D√©partement
                </label>
                <input class="form-control" value="@ViewBag.DepartmentName" disabled />
              </div>
            }
          </div>
          
          <!-- Section Destinataires -->
                   <div class="card border-info mt-4">
                     <div class="card-header bg-info text-white">
                       <h6 class="mb-0"><i class="bi bi-people me-1"></i>Destinataires</h6>
                     </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <label class="form-label">Rechercher un destinataire</label>
                  <input id="modalRecipientsSearch" class="form-control mb-2" placeholder="Tapez le nom ou email..." />
                </div>
                <div class="col-md-6">
                  <label class="form-label">S√©lection rapide</label>
                  <div class="btn-group w-100" role="group">
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="selectAllRecipients()">Tous</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearAllRecipients()">Aucun</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="selectByDepartment()">Par d√©partement</button>
                  </div>
                </div>
              </div>
              <div class="mt-3">
                <div class="border rounded p-3" style="max-height: 300px; overflow-y: auto; background-color: #f8f9fa;">
                  <div id="modalRecipients"></div>
                </div>
                <div class="form-text mt-2 d-flex justify-content-between">
                  <span>
                    <i class="bi bi-info-circle me-1"></i>
                    Cochez les destinataires de votre choix. Laisser vide pour envoyer √† tous (sauf vous).
                  </span>
                  <span id="recipientCount" class="badge bg-primary">0 s√©lectionn√©(s)</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Section Plateformes d'envoi -->
          <div class="card border-success mt-4">
            <div class="card-header bg-success text-white">
              <h6 class="mb-0"><i class="bi bi-send me-1"></i>Plateformes d'envoi</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-12">
                  <label class="form-label fw-bold">S√©lectionnez les moyens d'envoi :</label>
                  <div class="mt-2">
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformEmail" value="email" checked>
                      <label class="form-check-label" for="platformEmail">
                        <i class="bi bi-envelope me-1 text-primary"></i>Email
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformWhatsApp" value="whatsapp">
                      <label class="form-check-label" for="platformWhatsApp">
                        <i class="bi bi-whatsapp me-1 text-success"></i>WhatsApp
                      </label>
                    </div>
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="checkbox" id="platformDesktop" value="desktop" checked>
                      <label class="form-check-label" for="platformDesktop">
                        <i class="bi bi-bell me-1 text-warning"></i>Notification Desktop
                      </label>
                    </div>
                  </div>
                  <div class="form-text mt-2">
                    <i class="bi bi-info-circle me-1"></i>
                    Au moins une plateforme doit √™tre s√©lectionn√©e. Email et Desktop sont s√©lectionn√©s par d√©faut.
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-circle me-1"></i>Annuler
        </button>
        <button type="button" id="modalSaveBtn" class="btn btn-outline-primary">
          <i class="bi bi-lightning me-1"></i>Enregistrer comme alerte rapide
        </button>
        <button type="button" id="modalSendBtn" class="btn btn-success btn-lg">
          <i class="bi bi-send me-1"></i>Envoyer l'alerte
        </button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
async function fetchJson(url){ 
  try {
    const r = await fetch(url, { cache:'no-store' }); 
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return await r.json(); 
  } catch (error) {
    console.error('Failed to load alerts dynamically, falling back to page reload', error);
    throw error;
  }
}
function fmtPlus1(dateIso){ const d = new Date(dateIso); return new Date(d.getTime()+3600000).toLocaleString(); }

async function loadInbox(){
  // Afficher toutes les alertes (lues et non lues) avec leur statut
  const data = await fetchJson('/Alerts/HistoryData?status=all&page=1&size=10');
  renderList('inboxList', data, true);
  updateKpisFromData(data);
  updateUnreadKpi();
}
async function loadSent(){
  const data = await fetchJson('/Alerts/SentData?page=1&size=10');
  renderListCustom('sentList', data);
}
async function loadDept(){
  const formElement = document.getElementById('deptFilters');
  if (!formElement) return;
  const params = new URLSearchParams(new FormData(formElement));
  const data = await fetchJson('/Alerts/DeptData?' + params.toString() + '&page=1&size=10');
  renderListCustom('deptList', data);
}
async function loadAll(){
  const formElement = document.getElementById('allFilters');
  if (!formElement) return;
  const params = new URLSearchParams(new FormData(formElement));
  const r = await fetch(`/Alerts/HistoryData?${params.toString()}&page=1&size=20`);
  const data = await r.json();
  renderList('allList', data, false, true);
  const exportBtn = document.getElementById('exportCsvBtn');
  if (exportBtn) exportBtn.setAttribute('href', `/Alerts/ExportCsv?${params.toString()}`);
  updateKpisFromData(data);
  updateUnreadKpi();
}

function renderList(targetId, data, canConfirm, adminView=false){
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  el.innerHTML = `
    <table class="table table-sm align-middle">
      <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Exp√©diteur</th><th scope="col">Statut</th><th scope="col" class="text-end">Actions</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>
            ${x.alertType==='Obligatoire' ? '<span class="badge badge-type-obl">Obligatoire</span>' : '<span class="badge badge-type-info">Information</span>'}
          </td>
          <td>${x.title}</td>
          <td><small class="text-muted">${x.senderEmail || x.senderName || 'N/A'}</small></td>
          <td>${x.alertType==='Obligatoire' ? (x.isConfirmed ? '<span class="badge badge-status-lu">Lu</span>' : '<span class="badge badge-status-nonlu">Non lu</span>') : ''}</td>
          <td class="text-end">
            ${(!adminView && x.alertType==='Obligatoire' && !x.isConfirmed && canConfirm) ? `<button class="btn btn-outline-secondary btn-sm me-2" onclick="markRead(${x.alertRecipientId})" aria-label="Marquer l'alerte comme lue">Marquer lu</button>` : ''}
            <a class="btn btn-primary btn-sm" href="/AlertsCrud/Details/${x.alertId}">Acc√©der</a>
          </td>
        </tr>`).join('')}
      </tbody>
    </table>`;
}

function renderListCustom(targetId, data){
  const el = document.getElementById(targetId);
  if (!data.items || data.items.length===0){ el.innerHTML = '<div class="text-muted">Aucune alerte</div>'; return; }
  
  // Check if this is sent data (has recipientCount) or dept data (has recipient)
  const isSentData = data.items.length > 0 && data.items[0].hasOwnProperty('recipientCount');
  
  if (isSentData) {
    // Render sent alerts (created by user)
    el.innerHTML = `
      <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Emails</th><th scope="col">Statut</th></tr></thead>
        <tbody>
        ${data.items.map(x => `
          <tr id="sent-row-${x.alertId}">
            <td>${fmtPlus1(x.createdAt)}</td>
            <td><span class="badge ${x.alertType==='Obligatoire'?'bg-warning text-dark':'bg-info'}">${x.alertType}</span></td>
            <td>${x.title}</td>
            <td><small class="text-muted">${x.recipientEmails || 'N/A'}</small></td>
            <td id="status-cell-${x.alertId}">
              ${getAlertStatusHtml(x)}
            </td>
          </tr>`).join('')}
        </tbody>
      </table>`;
  } else {
    // Render dept data (original format)
  el.innerHTML = `
    <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Exp√©diteur</th><th scope="col">Destinataire</th><th scope="col">Statut</th><th scope="col">Heure de r√©ception</th></tr></thead>
      <tbody>
      ${data.items.map(x => `
        <tr>
          <td>${fmtPlus1(x.createdAt)}</td>
          <td>${x.alertType}</td>
          <td>${x.title}</td>
          <td>${x.sender}</td>
          <td>${x.recipient}</td>
            <td>${x.alertType==='Obligatoire' ? (x.isConfirmed ? 'Lu' : 'Non lu') : ''}</td>
            <td>${x.isConfirmed && x.confirmedAt ? fmtPlus1(x.confirmedAt) : ''}</td>
        </tr>`).join('')}
      </tbody>
    </table>`;
  }
}

function updateKpisFromData(data){
  try{
    const items = Array.isArray(data?.items) ? data.items : [];
    // This is page-scoped; authoritative unread is fetched via updateUnreadKpi()
    const unreadCount = items.filter(x => x.alertType === 'Obligatoire' && !x.isConfirmed).length;
    const today = new Date();
    today.setHours(0,0,0,0);
    const todayCount = items.filter(x => { const d = new Date(x.createdAt); return d >= today; }).length;
    const pendingCount = unreadCount;
    const confirmedMandatory = items.filter(x => x.alertType === 'Obligatoire' && x.isConfirmed).length;
    const setText = (id, val) => { const el = document.getElementById(id); if(el) el.textContent = String(val); };
    setText('kpiToday', todayCount);
    setText('kpiPending', pendingCount);
    setText('kpiConfirmedMandatory', confirmedMandatory);
  }catch{}
}

async function updateUnreadKpi(){
  try{
    const r = await fetch('/Alerts/UnreadCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const set = (id,v)=>{ const el=document.getElementById(id); if(el) el.textContent = String(v); };
    set('kpiPending', count);
  }catch{}
}

async function updateConfirmedMandatoryKpi(){
  try{
    const r = await fetch('/Alerts/ConfirmedMandatoryCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const el = document.getElementById('kpiConfirmedMandatory');
    if(el) el.textContent = String(count);
  }catch{}
}

async function updateTodayKpi(){
  try{
    const r = await fetch('/Alerts/TodayCount', { cache:'no-store' });
    if(!r.ok) return;
    const { count } = await r.json();
    const el = document.getElementById('kpiToday');
    if(el) el.textContent = String(count);
  }catch{}
}

// Dynamic filters for all tabs
document.getElementById('allFilters')?.addEventListener('submit', (e)=>{ e.preventDefault(); loadAll(); });
document.getElementById('deptFilters')?.addEventListener('submit', (e)=>{ e.preventDefault(); loadDept(); });

// Auto-filter on change for better UX
document.querySelectorAll('#allFilters select, #allFilters input, #deptFilters select, #deptFilters input').forEach(el => {
  el.addEventListener('change', () => {
    const form = el.closest('form');
    if (form.id === 'allFilters') loadAll();
    else if (form.id === 'deptFilters') loadDept();
  });
  if (el.type === 'date' || el.type === 'text') {
    let timeout;
    el.addEventListener('input', () => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        const form = el.closest('form');
        if (form.id === 'allFilters') loadAll();
        else if (form.id === 'deptFilters') loadDept();
      }, 500);
    });
  }
});

async function confirmAlert(id){ await fetch('/Alerts/Confirm', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }
async function markRead(id){ await fetch('/Alerts/MarkRead', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:`alertRecipientId=${id}` }); loadInbox(); loadMine(); updateUnreadKpi(); }

// Fonctions pour le syst√®me de statut et d'annulation
function getAlertStatusHtml(alert) {
  // Par d√©faut, les alertes existantes sont "Envoy√©"  
  const status = alert.SendStatus || alert.sendStatus || alert.c1 || 'Sent';
  
  switch(status) {
    case 'Pending':
    case 'Sending':
      return `
        <span class="badge bg-warning text-dark">En cours</span>
        <button class="btn btn-sm btn-outline-danger ms-1" onclick="cancelAlert(${alert.alertId})" title="Annuler l'envoi">
          <span class="text-danger">‚úï</span>
        </button>
      `;
    case 'Sent':
      return `<span class="badge bg-success">Envoy√©</span>`;
    case 'Failed':
      return `<span class="badge bg-danger">√âchou√©</span>`;
    case 'Cancelled':
      return `<span class="badge bg-secondary">Annul√©</span>`;
    default:
      return `<span class="badge bg-success">Envoy√©</span>`;
  }
}

// Fonction pour annuler une alerte
async function cancelAlert(alertId) {
  try {
    const response = await fetch('/AlertsCrud/Cancel', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `alertId=${alertId}`
    });
    
    const result = await response.json();
    if (result.success) {
      updateAlertStatus(alertId, 'Cancelled');
    } else {
      console.error('Erreur lors de l\'annulation:', result.message);
    }
  } catch (error) {
    console.error('Erreur lors de l\'annulation:', error);
  }
}

// Fonction pour mettre √† jour le statut d'une alerte en temps r√©el
function updateAlertStatus(alertId, status) {
  const statusCell = document.getElementById(`status-cell-${alertId}`);
  if (statusCell) {
    const fakeAlert = { alertId, SendStatus: status };
    statusCell.innerHTML = getAlertStatusHtml(fakeAlert);
  }
}

// Fonction pour g√©rer une nouvelle alerte avec statut "En cours"
function handleNewAlert(alertId, title = 'Nouvelle alerte', recipientEmails = 'N/A') {
  // Ajouter imm√©diatement la nouvelle alerte √† la liste des envoy√©s
  addNewAlertToSentList(alertId, title, recipientEmails);
  
  // D√©marrer le timer de 10 secondes
  setTimeout(() => {
    // V√©rifier si l'alerte n'a pas √©t√© annul√©e
    const statusCell = document.getElementById(`status-cell-${alertId}`);
    if (statusCell && statusCell.innerHTML.includes('En cours')) {
      // Simuler l'envoi (sera remplac√© par le vrai statut via SignalR)
      updateAlertStatus(alertId, 'Sent');
    }
  }, 10000);
}

// Fonction pour ajouter une nouvelle alerte √† la liste des envoy√©s
function addNewAlertToSentList(alertId, title, recipientEmails) {
  const sentList = document.getElementById('sentList');
  if (!sentList) return;
  
  const now = new Date().toISOString();
  const newAlert = {
    alertId: alertId,
    createdAt: now,
    alertType: 'Information', // Par d√©faut
    title: title,
    recipientEmails: recipientEmails,
    SendStatus: 'Pending'
  };
  
  // Cr√©er la nouvelle ligne
  const newRow = `
    <tr id="sent-row-${alertId}">
      <td>${fmtPlus1(now)}</td>
      <td><span class="badge bg-info">Information</span></td>
      <td>${title}</td>
      <td><small class="text-muted">${recipientEmails}</small></td>
      <td id="status-cell-${alertId}">
        ${getAlertStatusHtml(newAlert)}
      </td>
    </tr>
  `;
  
  // Ajouter au d√©but du tableau
  const tbody = sentList.querySelector('tbody');
  if (tbody) {
    tbody.insertAdjacentHTML('afterbegin', newRow);
  } else {
    // Si pas de tableau, cr√©er un nouveau tableau
    sentList.innerHTML = `
      <table class="table table-sm align-middle">
        <thead><tr><th scope="col">Date</th><th scope="col">Type</th><th scope="col">Titre</th><th scope="col">Emails</th><th scope="col">Statut</th></tr></thead>
        <tbody>${newRow}</tbody>
      </table>
    `;
  }
}

// Initial load
loadInbox();
updateUnreadKpi();
updateConfirmedMandatoryKpi();
updateTodayKpi();
if (document.getElementById('sentList')) loadSent();
if (document.getElementById('deptList')) loadDept();
if (document.getElementById('allFilters')) { loadAll(); }

// Auto-refresh every 30 seconds for real-time updates
setInterval(() => {
  updateUnreadKpi();
  updateConfirmedMandatoryKpi();
  updateTodayKpi();
  // Refresh active tab content
  const activeTab = document.querySelector('.nav-link.active');
  if (activeTab) {
    const target = activeTab.getAttribute('data-bs-target');
    if (target === '#inbox') loadInbox();
    else if (target === '#sent' && document.getElementById('sentList')) loadSent();
    else if (target === '#dept' && document.getElementById('deptList')) loadDept();
    else if (target === '#all' && document.getElementById('allFilters')) loadAll();
  }
}, 30000);

// Real-time updates via SignalR
if (window.signalR && typeof signalR !== 'undefined'){
  const connection = new signalR.HubConnectionBuilder().withUrl('/hubs/notifications').withAutomaticReconnect().build();
  
  connection.on('historyChanged', ()=> {
    loadInbox();
    updateUnreadKpi();
    updateConfirmedMandatoryKpi();
  });
  
  connection.on('sentChanged', ()=> { 
    if (document.getElementById('sentList')) loadSent(); 
  });
  
  connection.on('deptChanged', ()=> { 
    if (document.getElementById('deptList')) loadDept(); 
  });
  
  connection.on('newAlert', ()=> { 
    loadInbox(); 
    updateUnreadKpi(); 
    updateConfirmedMandatoryKpi(); 
    updateTodayKpi();
    // Refresh active tab content
    const activeTab = document.querySelector('.nav-link.active');
    if (activeTab) {
      const target = activeTab.getAttribute('data-bs-target');
      if (target === '#sent' && document.getElementById('sentList')) loadSent();
      else if (target === '#dept' && document.getElementById('deptList')) loadDept();
      else if (target === '#all' && document.getElementById('allFilters')) loadAll();
    }
  });
  
  connection.on('alertsChanged', ()=> {
    // Refresh all tabs and KPIs
    loadInbox();
    updateUnreadKpi();
    updateConfirmedMandatoryKpi();
    updateTodayKpi();
    if (document.getElementById('sentList')) loadSent();
    if (document.getElementById('deptList')) loadDept();
    if (document.getElementById('allFilters')) loadAll();
  });
  
  connection.on('badgeChanged', ()=> { 
    updateUnreadKpi(); 
    updateConfirmedMandatoryKpi(); 
    updateTodayKpi(); 
  });
  
  connection.on('alertStatusChanged', (alertId, status) => {
    // Update the status in real-time
    updateAlertStatus(alertId, status);
  });
  
  connection.start().catch(err => console.warn('SignalR connection failed:', err));
}

// Pending alerts management
let pendingAlerts = new Map();

function addPendingAlert(alertId, title, cancellationWindowSeconds = 5) {
  const endTime = Date.now() + (cancellationWindowSeconds * 1000);
  pendingAlerts.set(alertId, { title, endTime });
  updatePendingAlertsDisplay();
  
  // Auto-remove after cancellation window
  setTimeout(() => {
    pendingAlerts.delete(alertId);
    updatePendingAlertsDisplay();
  }, cancellationWindowSeconds * 1000);
}

function cancelAlert(alertId) {
  fetch(`/AlertsCrud/CancelAlert`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(alertId)
  })
  .then(r => r.json())
  .then(data => {
    if (data.success) {
      pendingAlerts.delete(alertId);
      updatePendingAlertsDisplay();
      showToast('Alerte annul√©e avec succ√®s', 'success');
    } else {
      showToast('Impossible d\'annuler l\'alerte', 'error');
    }
  })
  .catch(err => {
    console.error('Cancel failed:', err);
    showToast('Erreur lors de l\'annulation', 'error');
  });
}

function updatePendingAlertsDisplay() {
  const section = document.getElementById('pendingAlertsSection');
  const list = document.getElementById('pendingAlertsList');
  
  if (pendingAlerts.size === 0) {
    section.style.display = 'none';
    return;
  }
  
  section.style.display = 'block';
  let html = '';
  
  for (const [alertId, alert] of pendingAlerts) {
    const remainingSeconds = Math.max(0, Math.ceil((alert.endTime - Date.now()) / 1000));
    html += `
      <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
        <div>
          <strong>${alert.title}</strong>
          <div class="text-muted small">Temps restant: ${remainingSeconds}s</div>
        </div>
        <button class="btn btn-sm btn-outline-danger" onclick="cancelAlert(${alertId})" ${remainingSeconds <= 0 ? 'disabled' : ''}>
          Annuler
        </button>
      </div>
    `;
  }
  
  list.innerHTML = html;
  
  // Update countdown every second
  setTimeout(updatePendingAlertsDisplay, 1000);
}

// Toast notification system
function showToast(message, type = 'info') {
  const toastContainer = document.getElementById('toastContainer') || createToastContainer();
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0`;
  toast.setAttribute('role', 'alert');
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">${message}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast);
  bsToast.show();
  
  toast.addEventListener('hidden.bs.toast', () => toast.remove());
}

function createToastContainer() {
  const container = document.createElement('div');
  container.id = 'toastContainer';
  container.className = 'toast-container position-fixed top-0 end-0 p-3';
  container.style.zIndex = '1055';
  document.body.appendChild(container);
  return container;
}

// Modal Alert Functions
async function loadModalQuickAlerts() {
  try {
    const res = await fetch('/AlertsCrud/QuickList');
    const items = await res.json();
    const sel = document.getElementById('modalQuickSelect');
    if (sel) {
      sel.innerHTML = '<option value="">-- S√©lectionner --</option>';
      items.forEach(x => {
        const o = document.createElement('option');
        o.value = x.alertId;
        o.textContent = x.title;
        sel.appendChild(o);
      });
    }
  } catch (error) {
    console.error('Error loading quick alerts:', error);
  }
}

async function loadModalRecipients() {
  try {
    const res = await fetch('/AlertsCrud/Recipients');
    const items = await res.json();
    const container = document.getElementById('modalRecipients');
    if (container) {
      container.innerHTML = '';
      
      if (items.length === 0) {
        container.innerHTML = '<div class="text-muted text-center p-3">Aucun destinataire disponible</div>';
        return;
      }
      
      items.forEach(x => {
        const checkboxDiv = document.createElement('div');
        checkboxDiv.className = 'form-check mb-2 p-2 border-bottom';
        checkboxDiv.dataset.department = x.departmentId || '';
        checkboxDiv.dataset.role = x.role || '';
        
        const checkbox = document.createElement('input');
        checkbox.className = 'form-check-input';
        checkbox.type = 'checkbox';
        checkbox.id = `recipient_${x.userId}`;
        checkbox.value = x.userId;
        checkbox.name = 'recipients';
        
        const label = document.createElement('label');
        label.className = 'form-check-label w-100';
        label.htmlFor = `recipient_${x.userId}`;
        label.style.cursor = 'pointer';
        
        // Cr√©er le contenu du label avec ic√¥nes selon le r√¥le
        const roleIcon = x.role === 'Admin' ? 'üëë' : x.role === 'SuperUser' ? '‚≠ê' : 'üë§';
        const deptBadge = x.departmentName ? `<span class="badge bg-secondary ms-2">${x.departmentName}</span>` : '';
        
        label.innerHTML = `
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <strong>${roleIcon} ${x.username}</strong>
              <div class="text-muted small">${x.email || 'Pas d\'email'}</div>
            </div>
            ${deptBadge}
          </div>
        `;
        
        // Ajouter un event listener pour mettre √† jour le compteur
        checkbox.addEventListener('change', updateRecipientCount);
        
        checkboxDiv.appendChild(checkbox);
        checkboxDiv.appendChild(label);
        container.appendChild(checkboxDiv);
      });
      
      // Filter functionality
      const searchInput = document.getElementById('modalRecipientsSearch');
      if (searchInput) {
        // Remove existing event listener if any
        searchInput.removeEventListener('input', filterCheckboxes);
        searchInput.addEventListener('input', filterCheckboxes);
      }
    }
  } catch (error) {
    console.error('Error loading recipients:', error);
    const container = document.getElementById('modalRecipients');
    if (container) {
      container.innerHTML = '<div class="text-danger text-center p-3">Erreur lors du chargement des destinataires</div>';
    }
  }
}

function filterCheckboxes(event) {
  const searchTerm = event.target.value.toLowerCase();
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxDivs = container.querySelectorAll('.form-check');
    checkboxDivs.forEach(div => {
      const text = div.textContent.toLowerCase();
      div.style.display = text.includes(searchTerm) ? '' : 'none';
    });
  }
}

function updateRecipientCount() {
  const container = document.getElementById('modalRecipients');
  const countBadge = document.getElementById('recipientCount');
  if (container && countBadge) {
    const checkedCount = container.querySelectorAll('input[type="checkbox"]:checked').length;
    countBadge.textContent = `${checkedCount} s√©lectionn√©(s)`;
    countBadge.className = checkedCount > 0 ? 'badge bg-success' : 'badge bg-primary';
  }
}

// Modal Event Handlers
document.getElementById('modalQuickSelect')?.addEventListener('change', async function() {
  if (!this.value) {
    // Clear fields when no selection
    document.getElementById('modalTitle').value = '';
    document.getElementById('modalMessage').value = '';
    document.getElementById('modalAlertType').value = 'Information';
    return;
  }
  
  try {
    const res = await fetch(`/AlertsCrud/GetAlertDetails/${this.value}`);
    if (res.ok) {
      const data = await res.text();
      let alert;
      
      try {
        alert = JSON.parse(data);
      } catch (e) {
        console.error('Response is not JSON:', data);
        showToast('Erreur lors du chargement de l\'alerte', 'error');
        return;
      }
      
      // Fill form fields
      if (alert.title) document.getElementById('modalTitle').value = alert.title;
      if (alert.message) document.getElementById('modalMessage').value = alert.message;
      if (alert.alertType) document.getElementById('modalAlertType').value = alert.alertType;
      
      showToast('Alerte rapide charg√©e', 'success');
    } else {
      console.error('HTTP error:', res.status, res.statusText);
      showToast('Alerte introuvable', 'error');
    }
  } catch (error) {
    console.error('Error loading alert details:', error);
    showToast('Erreur r√©seau', 'error');
  }
});

document.getElementById('modalSaveBtn')?.addEventListener('click', async function() {
  const title = document.getElementById('modalTitle')?.value?.trim();
  const message = document.getElementById('modalMessage')?.value?.trim();
  const alertType = document.getElementById('modalAlertType')?.value;
  const departmentId = document.getElementById('modalDepartment')?.value || '';
  
  if (!title || !message) {
    showToast('Titre et message requis pour enregistrer', 'error');
    return;
  }
  
  try {
    const formData = new FormData();
    formData.append('title', title);
    formData.append('message', message);
    formData.append('alertType', alertType);
    formData.append('departmentId', departmentId);
    
    const res = await fetch('/AlertsCrud/QuickSave', { method: 'POST', body: formData });
    
    if (res.ok) {
      showToast('Alerte rapide enregistr√©e avec succ√®s !', 'success');
      await loadModalQuickAlerts(); // Refresh the quick alerts list
    } else {
      showToast('Erreur lors de l\'enregistrement', 'error');
    }
  } catch (error) {
    console.error('Error saving quick alert:', error);
    showToast('Erreur r√©seau', 'error');
  }
});

        document.getElementById('modalSendBtn')?.addEventListener('click', async function() {
          const title = document.getElementById('modalTitle')?.value?.trim();
          const message = document.getElementById('modalMessage')?.value?.trim();
          const alertType = document.getElementById('modalAlertType')?.value;
          const departmentId = document.getElementById('modalDepartment')?.value || '';
          
          const recipientsContainer = document.getElementById('modalRecipients');
          const selectedRecipients = Array.from(recipientsContainer?.querySelectorAll('input[type="checkbox"]:checked') || []).map(cb => cb.value);
          
          // R√©cup√©rer les plateformes s√©lectionn√©es
          const selectedPlatforms = [];
          if (document.getElementById('platformEmail')?.checked) selectedPlatforms.push('email');
          if (document.getElementById('platformWhatsApp')?.checked) selectedPlatforms.push('whatsapp');
          if (document.getElementById('platformDesktop')?.checked) selectedPlatforms.push('desktop');
  
          if (!title) {
            showToast('Titre requis', 'error');
            return;
          }
          
          if (selectedPlatforms.length === 0) {
            showToast('Veuillez s√©lectionner au moins une plateforme d\'envoi', 'error');
            return;
          }
  
  // D'abord cr√©er l'alerte comme template
  const quickSaveData = new FormData();
  quickSaveData.append('title', title);
  quickSaveData.append('message', message);
  quickSaveData.append('alertType', alertType);
  quickSaveData.append('departmentId', departmentId);
  
  try {
    // Cr√©er l'alerte template
    const quickRes = await fetch('/AlertsCrud/QuickSave', { method: 'POST', body: quickSaveData });
    if (!quickRes.ok) {
      showToast('Erreur lors de la cr√©ation de l\'alerte', 'error');
      return;
    }
    
    const quickResult = await quickRes.json();
    const alertId = quickResult.alertId;
    
             // Maintenant envoyer l'alerte
             const sendData = new FormData();
             sendData.append('alertId', alertId);
             sendData.append('recipients', selectedRecipients.join(','));
             sendData.append('platforms', selectedPlatforms.join(','));
    
    const res = await fetch('/AlertsCrud/Send', { method: 'POST', body: sendData });
    
    if (res.ok) {
      const data = await res.json();
      if (data && data.alertId) {
        showToast(`Alerte en cours d'envoi ‚Äî ${data.recipients} destinataires. Fen√™tre d'annulation: 10s`, 'success');
        
        // Add to pending alerts for cancellation with new system
        if (typeof handleNewAlert === 'function') {
          const recipientEmails = data.attemptedEmails ? data.attemptedEmails.join(', ') : 'N/A';
          handleNewAlert(data.alertId, title, recipientEmails);
        }
        
        // Refresh sent data
        setTimeout(() => {
          if (typeof loadSent === 'function') {
            loadSent();
          }
        }, 500);
        
        // Clear form and close modal
        document.getElementById('modalTitle').value = '';
        document.getElementById('modalMessage').value = '';
        document.getElementById('modalQuickSelect').value = '';
        clearAllRecipients(); // Clear all checkboxes
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('newAlertModal'));
        modal?.hide();
      } else {
        showToast('Erreur: Pas d\'ID alerte retourn√©', 'error');
      }
    } else {
      showToast(`Erreur HTTP ${res.status}`, 'error');
    }
  } catch (error) {
    console.error('Error sending alert:', error);
    showToast('Erreur r√©seau', 'error');
  }
});

// Initialize modal data when modal is shown
// Fonctions pour la s√©lection rapide des destinataires
function selectAllRecipients() {
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxes = container.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.checked = true;
    });
    updateRecipientCount();
  }
}

function clearAllRecipients() {
  const container = document.getElementById('modalRecipients');
  if (container) {
    const checkboxes = container.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    updateRecipientCount();
  }
}

function selectByDepartment() {
  const departmentSelect = document.getElementById('modalDepartment');
  const container = document.getElementById('modalRecipients');
  
  if (!departmentSelect || !container) return;
  
  const selectedDept = departmentSelect.value;
  if (!selectedDept) {
    showToast('Veuillez d\'abord s√©lectionner un d√©partement', 'warning');
    return;
  }
  
  // Clear current selection
  clearAllRecipients();
  
  // Select recipients from the chosen department
  const checkboxDivs = container.querySelectorAll('.form-check');
  checkboxDivs.forEach(div => {
    if (div.dataset.department === selectedDept) {
      const checkbox = div.querySelector('input[type="checkbox"]');
      if (checkbox) checkbox.checked = true;
    }
  });
  updateRecipientCount();
}


document.getElementById('newAlertModal')?.addEventListener('shown.bs.modal', function() {
  loadModalQuickAlerts();
  loadModalRecipients();
});
</script>
}


